/*
 *  Copyright 2022 Netflix, Inc.
 *  <p>
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 *  the License. You may obtain a copy of the License at
 *  <p>
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  <p>
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 *  an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 */

plugins {
    id "com.gradle.enterprise" version "3.4.1"
}

gradleEnterprise {
    buildScan {
        termsOfServiceUrl = "https://gradle.com/terms-of-service"
        termsOfServiceAgree = "yes"
        publishAlways()

        buildScanPublished { scan ->
            file("buildscan.log") << "${new Date()} - ${scan.buildScanUri}\n"
        }
    }
}

rootProject.name = 'conductor-community'

include 'external-payload-storage'
include 'tasks'
include 'event-queues'
include 'metrics'
include 'persistence'
include 'index'
include 'community-common'
include 'locks'
include 'contribs'

include 'persistence:common-persistence'
include 'persistence:mysql-persistence'
include 'persistence:postgres-persistence'
include 'index:es7-persistence'
include 'index:noop'
include 'external-payload-storage:azureblob-storage'
include 'external-payload-storage:postgres-external-storage'
include 'external-payload-storage:s3-storage'
include 'event-queues:amqp'
include 'event-queues:nats'
include 'event-queues:sqs'
include 'locks:zookeeper-lock'
include 'locks:local-lock'

rootProject.children.stream()
        .filter(p -> p.name.equals("persistence") || p.name.equals("index") ||
                p.name.equals("external-payload-storage") || p.name.equals("event-queues") ||
                p.name.equals("locks") || p.name.equals("contribs"))
        .forEach(it -> it.children
                .forEach(c -> c.name = "conductor-" + c.name))

rootProject.children.stream()
        .filter(p -> !p.name.equals("persistence") && !p.name.equals("index") &&
                !p.name.equals("external-payload-storage") && !p.name.equals("event-queues") &&
                !p.name.equals("locks") && !p.name.equals("contribs"))
        .forEach(it -> it.name = "conductor-" + it.name)

