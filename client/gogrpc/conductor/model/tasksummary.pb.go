// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model/tasksummary.proto

package model // import "github.com/netflix/conductor/client/gogrpc/conductor/model"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskSummary struct {
	WorkflowId            string      `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId" json:"workflow_id,omitempty"`
	WorkflowType          string      `protobuf:"bytes,2,opt,name=workflow_type,json=workflowType" json:"workflow_type,omitempty"`
	CorrelationId         string      `protobuf:"bytes,3,opt,name=correlation_id,json=correlationId" json:"correlation_id,omitempty"`
	ScheduledTime         string      `protobuf:"bytes,4,opt,name=scheduled_time,json=scheduledTime" json:"scheduled_time,omitempty"`
	StartTime             string      `protobuf:"bytes,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	UpdateTime            string      `protobuf:"bytes,6,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	EndTime               string      `protobuf:"bytes,7,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Status                Task_Status `protobuf:"varint,8,opt,name=status,enum=com.netflix.conductor.proto.Task_Status" json:"status,omitempty"`
	ReasonForIncompletion string      `protobuf:"bytes,9,opt,name=reason_for_incompletion,json=reasonForIncompletion" json:"reason_for_incompletion,omitempty"`
	ExecutionTime         int64       `protobuf:"varint,10,opt,name=execution_time,json=executionTime" json:"execution_time,omitempty"`
	QueueWaitTime         int64       `protobuf:"varint,11,opt,name=queue_wait_time,json=queueWaitTime" json:"queue_wait_time,omitempty"`
	TaskDefName           string      `protobuf:"bytes,12,opt,name=task_def_name,json=taskDefName" json:"task_def_name,omitempty"`
	TaskType              string      `protobuf:"bytes,13,opt,name=task_type,json=taskType" json:"task_type,omitempty"`
	Input                 string      `protobuf:"bytes,14,opt,name=input" json:"input,omitempty"`
	Output                string      `protobuf:"bytes,15,opt,name=output" json:"output,omitempty"`
	TaskId                string      `protobuf:"bytes,16,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}    `json:"-"`
	XXX_unrecognized      []byte      `json:"-"`
	XXX_sizecache         int32       `json:"-"`
}

func (m *TaskSummary) Reset()         { *m = TaskSummary{} }
func (m *TaskSummary) String() string { return proto.CompactTextString(m) }
func (*TaskSummary) ProtoMessage()    {}
func (*TaskSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_tasksummary_ab79a64782e5b735, []int{0}
}
func (m *TaskSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskSummary.Unmarshal(m, b)
}
func (m *TaskSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskSummary.Marshal(b, m, deterministic)
}
func (dst *TaskSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskSummary.Merge(dst, src)
}
func (m *TaskSummary) XXX_Size() int {
	return xxx_messageInfo_TaskSummary.Size(m)
}
func (m *TaskSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskSummary.DiscardUnknown(m)
}

var xxx_messageInfo_TaskSummary proto.InternalMessageInfo

func (m *TaskSummary) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *TaskSummary) GetWorkflowType() string {
	if m != nil {
		return m.WorkflowType
	}
	return ""
}

func (m *TaskSummary) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *TaskSummary) GetScheduledTime() string {
	if m != nil {
		return m.ScheduledTime
	}
	return ""
}

func (m *TaskSummary) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *TaskSummary) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

func (m *TaskSummary) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *TaskSummary) GetStatus() Task_Status {
	if m != nil {
		return m.Status
	}
	return Task_IN_PROGRESS
}

func (m *TaskSummary) GetReasonForIncompletion() string {
	if m != nil {
		return m.ReasonForIncompletion
	}
	return ""
}

func (m *TaskSummary) GetExecutionTime() int64 {
	if m != nil {
		return m.ExecutionTime
	}
	return 0
}

func (m *TaskSummary) GetQueueWaitTime() int64 {
	if m != nil {
		return m.QueueWaitTime
	}
	return 0
}

func (m *TaskSummary) GetTaskDefName() string {
	if m != nil {
		return m.TaskDefName
	}
	return ""
}

func (m *TaskSummary) GetTaskType() string {
	if m != nil {
		return m.TaskType
	}
	return ""
}

func (m *TaskSummary) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *TaskSummary) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *TaskSummary) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func init() {
	proto.RegisterType((*TaskSummary)(nil), "com.netflix.conductor.proto.TaskSummary")
}

func init() {
	proto.RegisterFile("model/tasksummary.proto", fileDescriptor_tasksummary_ab79a64782e5b735)
}

var fileDescriptor_tasksummary_ab79a64782e5b735 = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x6b, 0x1b, 0x31,
	0x10, 0xc5, 0x71, 0x93, 0xf8, 0xcf, 0x38, 0xeb, 0x84, 0xa5, 0xad, 0xb7, 0x0d, 0x25, 0x26, 0xa5,
	0xc5, 0xa7, 0x5d, 0x68, 0xa1, 0x87, 0x9e, 0x4a, 0x28, 0x05, 0x53, 0x28, 0xc5, 0x31, 0x14, 0x7a,
	0x59, 0x64, 0x69, 0xd6, 0x11, 0x5e, 0x49, 0x5b, 0xad, 0x84, 0xe3, 0x0f, 0xd9, 0xef, 0x54, 0x34,
	0xda, 0xb8, 0x3e, 0xe5, 0xa8, 0xdf, 0x7b, 0x9a, 0x19, 0xbd, 0x11, 0x4c, 0x95, 0x11, 0x58, 0x17,
	0x8e, 0xb5, 0xdb, 0xd6, 0x2b, 0xc5, 0xec, 0x3e, 0x6f, 0xac, 0x71, 0x26, 0xbd, 0xe2, 0x46, 0xe5,
	0x1a, 0x5d, 0x55, 0xcb, 0x87, 0x9c, 0x1b, 0x2d, 0x3c, 0x77, 0xc6, 0x46, 0xf1, 0xf5, 0xe5, 0xff,
	0x5b, 0x91, 0xdc, 0xfc, 0x3d, 0x85, 0xf1, 0x8a, 0xb5, 0xdb, 0xbb, 0x58, 0x24, 0xbd, 0x86, 0xf1,
	0xce, 0xd8, 0x6d, 0x55, 0x9b, 0x5d, 0x29, 0x45, 0xd6, 0x9b, 0xf5, 0xe6, 0xa3, 0x25, 0x3c, 0xa2,
	0x85, 0x48, 0xdf, 0x42, 0x72, 0x30, 0xb8, 0x7d, 0x83, 0xd9, 0x33, 0xb2, 0x9c, 0x3f, 0xc2, 0xd5,
	0xbe, 0xc1, 0xf4, 0x1d, 0x4c, 0xb8, 0xb1, 0x16, 0x6b, 0xe6, 0xa4, 0xd1, 0xa1, 0xd0, 0x09, 0xb9,
	0x92, 0x23, 0xba, 0x10, 0xc1, 0xd6, 0xf2, 0x7b, 0x14, 0xbe, 0x46, 0x51, 0x3a, 0xa9, 0x30, 0x3b,
	0x8d, 0xb6, 0x03, 0x5d, 0x49, 0x85, 0xe9, 0x1b, 0x80, 0xd6, 0x31, 0xeb, 0xa2, 0xe5, 0x8c, 0x2c,
	0x23, 0x22, 0x24, 0x5f, 0xc3, 0xd8, 0x37, 0x82, 0x39, 0x8c, 0x7a, 0x3f, 0x8e, 0x1c, 0x11, 0x19,
	0x5e, 0xc1, 0x10, 0x75, 0xd7, 0x60, 0x40, 0xea, 0x00, 0x75, 0x2c, 0xfd, 0x05, 0xfa, 0xad, 0x63,
	0xce, 0xb7, 0xd9, 0x70, 0xd6, 0x9b, 0x4f, 0x3e, 0xcc, 0xf3, 0x27, 0xe2, 0xcb, 0x43, 0x50, 0xf9,
	0x1d, 0xf9, 0x97, 0xdd, 0xbd, 0xf4, 0x13, 0x4c, 0x2d, 0xb2, 0xd6, 0xe8, 0xb2, 0x32, 0xb6, 0x94,
	0x9a, 0x1b, 0xd5, 0xd4, 0x18, 0x1e, 0x98, 0x8d, 0xa8, 0xd7, 0x8b, 0x28, 0x7f, 0x33, 0x76, 0x71,
	0x24, 0x86, 0xb7, 0xe3, 0x03, 0x72, 0x4f, 0x01, 0xd1, 0x68, 0x30, 0xeb, 0xcd, 0x4f, 0x96, 0xc9,
	0x81, 0xd2, 0x80, 0xef, 0xe1, 0xe2, 0x8f, 0x47, 0x8f, 0xe5, 0x8e, 0xc9, 0x2e, 0x80, 0x71, 0xf4,
	0x11, 0xfe, 0xc5, 0x64, 0x0c, 0xe1, 0x06, 0x92, 0xb0, 0xd5, 0x52, 0x60, 0x55, 0x6a, 0xa6, 0x30,
	0x3b, 0xa7, 0xe6, 0xe3, 0x00, 0xbf, 0x62, 0xf5, 0x83, 0x29, 0x4c, 0xaf, 0x60, 0x44, 0x1e, 0x5a,
	0x5b, 0x42, 0xfa, 0x30, 0x00, 0x5a, 0xd9, 0x73, 0x38, 0x93, 0xba, 0xf1, 0x2e, 0x9b, 0x90, 0x10,
	0x0f, 0xe9, 0x4b, 0xe8, 0x1b, 0xef, 0x02, 0xbe, 0x20, 0xdc, 0x9d, 0xd2, 0x29, 0x0c, 0xa8, 0x94,
	0x14, 0xd9, 0x65, 0x14, 0xc2, 0x71, 0x21, 0x6e, 0xbf, 0xdf, 0x26, 0x47, 0xdf, 0xe9, 0xe7, 0xfa,
	0xf7, 0xe7, 0x8d, 0x74, 0xf7, 0x7e, 0x1d, 0x72, 0x2d, 0xba, 0x5c, 0x8b, 0x43, 0xae, 0x05, 0xaf,
	0x25, 0x6a, 0x57, 0x6c, 0xcc, 0xc6, 0x36, 0xfc, 0x88, 0xd3, 0x3f, 0x5d, 0xf7, 0x29, 0xf6, 0x8f,
	0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x7f, 0x0a, 0x96, 0xed, 0x02, 0x00, 0x00,
}
