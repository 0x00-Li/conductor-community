// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model/task.proto

package model // import "github.com/netflix/conductor/client/gogrpc/conductor/model"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _struct "github.com/golang/protobuf/ptypes/struct"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Task_Status int32

const (
	Task_IN_PROGRESS           Task_Status = 0
	Task_CANCELED              Task_Status = 1
	Task_FAILED                Task_Status = 2
	Task_COMPLETED             Task_Status = 3
	Task_COMPLETED_WITH_ERRORS Task_Status = 4
	Task_SCHEDULED             Task_Status = 5
	Task_TIMED_OUT             Task_Status = 6
	Task_READY_FOR_RERUN       Task_Status = 7
	Task_SKIPPED               Task_Status = 8
)

var Task_Status_name = map[int32]string{
	0: "IN_PROGRESS",
	1: "CANCELED",
	2: "FAILED",
	3: "COMPLETED",
	4: "COMPLETED_WITH_ERRORS",
	5: "SCHEDULED",
	6: "TIMED_OUT",
	7: "READY_FOR_RERUN",
	8: "SKIPPED",
}
var Task_Status_value = map[string]int32{
	"IN_PROGRESS":           0,
	"CANCELED":              1,
	"FAILED":                2,
	"COMPLETED":             3,
	"COMPLETED_WITH_ERRORS": 4,
	"SCHEDULED":             5,
	"TIMED_OUT":             6,
	"READY_FOR_RERUN":       7,
	"SKIPPED":               8,
}

func (x Task_Status) String() string {
	return proto.EnumName(Task_Status_name, int32(x))
}
func (Task_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_task_c6cd754250bb9501, []int{0, 0}
}

type Task struct {
	TaskType               string                    `protobuf:"bytes,1,opt,name=task_type,json=taskType" json:"task_type,omitempty"`
	Status                 Task_Status               `protobuf:"varint,2,opt,name=status,enum=com.netflix.conductor.proto.Task_Status" json:"status,omitempty"`
	InputData              map[string]*_struct.Value `protobuf:"bytes,3,rep,name=input_data,json=inputData" json:"input_data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ReferenceTaskName      string                    `protobuf:"bytes,4,opt,name=reference_task_name,json=referenceTaskName" json:"reference_task_name,omitempty"`
	RetryCount             int32                     `protobuf:"varint,5,opt,name=retry_count,json=retryCount" json:"retry_count,omitempty"`
	Seq                    int32                     `protobuf:"varint,6,opt,name=seq" json:"seq,omitempty"`
	CorrelationId          string                    `protobuf:"bytes,7,opt,name=correlation_id,json=correlationId" json:"correlation_id,omitempty"`
	PollCount              int32                     `protobuf:"varint,8,opt,name=poll_count,json=pollCount" json:"poll_count,omitempty"`
	TaskDefName            string                    `protobuf:"bytes,9,opt,name=task_def_name,json=taskDefName" json:"task_def_name,omitempty"`
	ScheduledTime          int64                     `protobuf:"varint,10,opt,name=scheduled_time,json=scheduledTime" json:"scheduled_time,omitempty"`
	StartTime              int64                     `protobuf:"varint,11,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime                int64                     `protobuf:"varint,12,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	UpdateTime             int64                     `protobuf:"varint,13,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	StartDelayInSeconds    int32                     `protobuf:"varint,14,opt,name=start_delay_in_seconds,json=startDelayInSeconds" json:"start_delay_in_seconds,omitempty"`
	RetriedTaskId          string                    `protobuf:"bytes,15,opt,name=retried_task_id,json=retriedTaskId" json:"retried_task_id,omitempty"`
	Retried                bool                      `protobuf:"varint,16,opt,name=retried" json:"retried,omitempty"`
	CallbackFromWorker     bool                      `protobuf:"varint,17,opt,name=callback_from_worker,json=callbackFromWorker" json:"callback_from_worker,omitempty"`
	ResponseTimeoutSeconds int32                     `protobuf:"varint,18,opt,name=response_timeout_seconds,json=responseTimeoutSeconds" json:"response_timeout_seconds,omitempty"`
	WorkflowInstanceId     string                    `protobuf:"bytes,19,opt,name=workflow_instance_id,json=workflowInstanceId" json:"workflow_instance_id,omitempty"`
	WorkflowType           string                    `protobuf:"bytes,20,opt,name=workflow_type,json=workflowType" json:"workflow_type,omitempty"`
	TaskId                 string                    `protobuf:"bytes,21,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	ReasonForIncompletion  string                    `protobuf:"bytes,22,opt,name=reason_for_incompletion,json=reasonForIncompletion" json:"reason_for_incompletion,omitempty"`
	CallbackAfterSeconds   int64                     `protobuf:"varint,23,opt,name=callback_after_seconds,json=callbackAfterSeconds" json:"callback_after_seconds,omitempty"`
	WorkerId               string                    `protobuf:"bytes,24,opt,name=worker_id,json=workerId" json:"worker_id,omitempty"`
	OutputData             map[string]*_struct.Value `protobuf:"bytes,25,rep,name=output_data,json=outputData" json:"output_data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	WorkflowTask           *WorkflowTask             `protobuf:"bytes,26,opt,name=workflow_task,json=workflowTask" json:"workflow_task,omitempty"`
	Domain                 string                    `protobuf:"bytes,27,opt,name=domain" json:"domain,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                  `json:"-"`
	XXX_unrecognized       []byte                    `json:"-"`
	XXX_sizecache          int32                     `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_c6cd754250bb9501, []int{0}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (dst *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(dst, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetTaskType() string {
	if m != nil {
		return m.TaskType
	}
	return ""
}

func (m *Task) GetStatus() Task_Status {
	if m != nil {
		return m.Status
	}
	return Task_IN_PROGRESS
}

func (m *Task) GetInputData() map[string]*_struct.Value {
	if m != nil {
		return m.InputData
	}
	return nil
}

func (m *Task) GetReferenceTaskName() string {
	if m != nil {
		return m.ReferenceTaskName
	}
	return ""
}

func (m *Task) GetRetryCount() int32 {
	if m != nil {
		return m.RetryCount
	}
	return 0
}

func (m *Task) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *Task) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *Task) GetPollCount() int32 {
	if m != nil {
		return m.PollCount
	}
	return 0
}

func (m *Task) GetTaskDefName() string {
	if m != nil {
		return m.TaskDefName
	}
	return ""
}

func (m *Task) GetScheduledTime() int64 {
	if m != nil {
		return m.ScheduledTime
	}
	return 0
}

func (m *Task) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Task) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Task) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *Task) GetStartDelayInSeconds() int32 {
	if m != nil {
		return m.StartDelayInSeconds
	}
	return 0
}

func (m *Task) GetRetriedTaskId() string {
	if m != nil {
		return m.RetriedTaskId
	}
	return ""
}

func (m *Task) GetRetried() bool {
	if m != nil {
		return m.Retried
	}
	return false
}

func (m *Task) GetCallbackFromWorker() bool {
	if m != nil {
		return m.CallbackFromWorker
	}
	return false
}

func (m *Task) GetResponseTimeoutSeconds() int32 {
	if m != nil {
		return m.ResponseTimeoutSeconds
	}
	return 0
}

func (m *Task) GetWorkflowInstanceId() string {
	if m != nil {
		return m.WorkflowInstanceId
	}
	return ""
}

func (m *Task) GetWorkflowType() string {
	if m != nil {
		return m.WorkflowType
	}
	return ""
}

func (m *Task) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *Task) GetReasonForIncompletion() string {
	if m != nil {
		return m.ReasonForIncompletion
	}
	return ""
}

func (m *Task) GetCallbackAfterSeconds() int64 {
	if m != nil {
		return m.CallbackAfterSeconds
	}
	return 0
}

func (m *Task) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

func (m *Task) GetOutputData() map[string]*_struct.Value {
	if m != nil {
		return m.OutputData
	}
	return nil
}

func (m *Task) GetWorkflowTask() *WorkflowTask {
	if m != nil {
		return m.WorkflowTask
	}
	return nil
}

func (m *Task) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func init() {
	proto.RegisterType((*Task)(nil), "com.netflix.conductor.proto.Task")
	proto.RegisterMapType((map[string]*_struct.Value)(nil), "com.netflix.conductor.proto.Task.InputDataEntry")
	proto.RegisterMapType((map[string]*_struct.Value)(nil), "com.netflix.conductor.proto.Task.OutputDataEntry")
	proto.RegisterEnum("com.netflix.conductor.proto.Task_Status", Task_Status_name, Task_Status_value)
}

func init() { proto.RegisterFile("model/task.proto", fileDescriptor_task_c6cd754250bb9501) }

var fileDescriptor_task_c6cd754250bb9501 = []byte{
	// 899 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x5d, 0x6f, 0xdb, 0x36,
	0x14, 0x9d, 0xf2, 0xe1, 0x8f, 0xab, 0xd8, 0x56, 0x99, 0xc4, 0x61, 0x9c, 0x0d, 0x35, 0x32, 0x74,
	0xf0, 0x80, 0x41, 0xce, 0xd2, 0x61, 0x28, 0xfa, 0xb4, 0xd4, 0x52, 0x56, 0x61, 0xad, 0x6d, 0xc8,
	0xce, 0x82, 0xed, 0x45, 0xa0, 0x25, 0xda, 0x15, 0x2c, 0x89, 0x1e, 0x45, 0xad, 0xf3, 0x8f, 0xd9,
	0x3f, 0xdc, 0x8f, 0x18, 0x48, 0x5a, 0xaa, 0xb7, 0x87, 0xf6, 0xa5, 0x6f, 0xe2, 0x39, 0xf7, 0x5e,
	0x9f, 0x7b, 0xc8, 0x7b, 0x0d, 0x56, 0xca, 0x22, 0x9a, 0x0c, 0x05, 0xc9, 0xd7, 0xf6, 0x86, 0x33,
	0xc1, 0xd0, 0x55, 0xc8, 0x52, 0x3b, 0xa3, 0x62, 0x99, 0xc4, 0x7f, 0xd9, 0x21, 0xcb, 0xa2, 0x22,
	0x14, 0x8c, 0x6b, 0xb2, 0x87, 0x75, 0xf8, 0x7b, 0xc6, 0xd7, 0xcb, 0x84, 0xbd, 0xff, 0x90, 0xd6,
	0xfb, 0x72, 0xc5, 0xd8, 0x2a, 0xa1, 0x43, 0x75, 0x5a, 0x14, 0xcb, 0x61, 0x2e, 0x78, 0x11, 0x0a,
	0xcd, 0x5e, 0xff, 0x63, 0xc2, 0xd1, 0x9c, 0xe4, 0x6b, 0x74, 0x05, 0x4d, 0x99, 0x14, 0x88, 0xed,
	0x86, 0x62, 0xa3, 0x6f, 0x0c, 0x9a, 0x7e, 0x43, 0x02, 0xf3, 0xed, 0x86, 0xa2, 0x9f, 0xa0, 0x96,
	0x0b, 0x22, 0x8a, 0x1c, 0x1f, 0xf4, 0x8d, 0x41, 0xfb, 0x76, 0x60, 0x7f, 0x44, 0x8b, 0x2d, 0xeb,
	0xd9, 0x33, 0x15, 0xef, 0xef, 0xf2, 0xd0, 0x04, 0x20, 0xce, 0x36, 0x85, 0x08, 0x22, 0x22, 0x08,
	0x3e, 0xec, 0x1f, 0x0e, 0xcc, 0xdb, 0x9b, 0x4f, 0x57, 0xf1, 0x64, 0x8e, 0x43, 0x04, 0x71, 0x33,
	0xc1, 0xb7, 0x7e, 0x33, 0x2e, 0xcf, 0xc8, 0x86, 0x53, 0x4e, 0x97, 0x94, 0xd3, 0x2c, 0xa4, 0x81,
	0x52, 0x9e, 0x91, 0x94, 0xe2, 0x23, 0xa5, 0xfc, 0x49, 0x45, 0xc9, 0x2a, 0x63, 0x92, 0x52, 0xf4,
	0x14, 0x4c, 0x4e, 0x05, 0xdf, 0x06, 0x21, 0x2b, 0x32, 0x81, 0x8f, 0xfb, 0xc6, 0xe0, 0xd8, 0x07,
	0x05, 0x8d, 0x24, 0x82, 0x2c, 0x38, 0xcc, 0xe9, 0x1f, 0xb8, 0xa6, 0x08, 0xf9, 0x89, 0x9e, 0x41,
	0x3b, 0x64, 0x9c, 0xd3, 0x84, 0x88, 0x98, 0x65, 0x41, 0x1c, 0xe1, 0xba, 0xaa, 0xde, 0xda, 0x43,
	0xbd, 0x08, 0x7d, 0x05, 0xb0, 0x61, 0x49, 0xb2, 0x2b, 0xdc, 0x50, 0xf9, 0x4d, 0x89, 0xe8, 0xba,
	0xd7, 0xd0, 0x52, 0xf2, 0x22, 0xba, 0xd4, 0x12, 0x9b, 0xaa, 0x88, 0x29, 0x41, 0x87, 0x2e, 0x95,
	0xb8, 0x67, 0xd0, 0xce, 0xc3, 0x77, 0x34, 0x2a, 0x12, 0x1a, 0x05, 0x22, 0x4e, 0x29, 0x86, 0xbe,
	0x31, 0x38, 0xf4, 0x5b, 0x15, 0x3a, 0x8f, 0x53, 0x2a, 0x7f, 0x29, 0x17, 0x84, 0x0b, 0x1d, 0x62,
	0xaa, 0x90, 0xa6, 0x42, 0x14, 0x7d, 0x09, 0x0d, 0x9a, 0xed, 0xf2, 0x4f, 0x14, 0x59, 0xa7, 0x99,
	0xce, 0x7c, 0x0a, 0x66, 0xb1, 0x89, 0x88, 0xa0, 0x9a, 0x6d, 0x29, 0x16, 0x34, 0xa4, 0x02, 0x9e,
	0x43, 0x57, 0x97, 0x8e, 0x68, 0x42, 0xb6, 0x41, 0x9c, 0x05, 0x39, 0x95, 0x37, 0x92, 0xe3, 0xb6,
	0x6a, 0xe8, 0x54, 0xb1, 0x8e, 0x24, 0xbd, 0x6c, 0xa6, 0x29, 0xf4, 0x0d, 0x74, 0xa4, 0x81, 0xb1,
	0x14, 0x2d, 0x5b, 0x8c, 0x23, 0xdc, 0xd1, 0x0e, 0xed, 0x60, 0xe9, 0xbe, 0x17, 0x21, 0x0c, 0xf5,
	0x1d, 0x80, 0xad, 0xbe, 0x31, 0x68, 0xf8, 0xe5, 0x11, 0xdd, 0xc0, 0x59, 0x48, 0x92, 0x64, 0x41,
	0xc2, 0x75, 0xb0, 0xe4, 0x2c, 0x0d, 0xe4, 0x03, 0xa6, 0x1c, 0x3f, 0x51, 0x61, 0xa8, 0xe4, 0xee,
	0x39, 0x4b, 0x1f, 0x15, 0x83, 0x5e, 0x00, 0xe6, 0x34, 0xdf, 0xb0, 0x2c, 0xd7, 0xbd, 0xb0, 0x42,
	0x54, 0x52, 0x91, 0x92, 0xda, 0x2d, 0xf9, 0xb9, 0xa6, 0x4b, 0xb5, 0x37, 0x70, 0x56, 0x8e, 0x47,
	0x10, 0x67, 0xb9, 0x20, 0xf2, 0xe5, 0xc4, 0x11, 0x3e, 0x55, 0x92, 0x51, 0xc9, 0x79, 0x3b, 0xca,
	0x8b, 0xd0, 0xd7, 0xd0, 0xaa, 0x32, 0xd4, 0x5c, 0x9c, 0xa9, 0xd0, 0x93, 0x12, 0x54, 0xb3, 0x71,
	0x01, 0xf5, 0xb2, 0xf9, 0x73, 0x45, 0xd7, 0x84, 0xee, 0xfa, 0x47, 0xb8, 0xe0, 0x94, 0xe4, 0x2c,
	0x0b, 0x96, 0x8c, 0x07, 0x71, 0x16, 0xb2, 0x74, 0x93, 0x50, 0xf9, 0x68, 0x70, 0x57, 0x05, 0x9e,
	0x6b, 0xfa, 0x9e, 0x71, 0x6f, 0x8f, 0x44, 0x3f, 0x40, 0xb7, 0xf2, 0x84, 0x2c, 0x05, 0xe5, 0x55,
	0x7f, 0x17, 0xea, 0xda, 0x2a, 0xc7, 0xee, 0x24, 0x59, 0x76, 0x77, 0x05, 0x4d, 0xed, 0x9d, 0x14,
	0x82, 0xf5, 0xfc, 0x6a, 0xc0, 0x8b, 0x90, 0x0f, 0x26, 0x2b, 0x44, 0x35, 0x7e, 0x97, 0x6a, 0xfc,
	0xbe, 0xff, 0xf4, 0xf8, 0x4d, 0x54, 0xd2, 0x87, 0xf9, 0x03, 0x56, 0x01, 0x68, 0xbc, 0x6f, 0x0e,
	0xc9, 0xd7, 0xb8, 0xd7, 0x37, 0x06, 0xe6, 0xed, 0xb7, 0x1f, 0xad, 0xfa, 0x58, 0x3a, 0x47, 0xf2,
	0xf5, 0x9e, 0x8f, 0x72, 0x01, 0x75, 0xa1, 0x16, 0xb1, 0x94, 0xc4, 0x19, 0xbe, 0xd2, 0x36, 0xea,
	0x53, 0x6f, 0x0e, 0xed, 0xff, 0x6e, 0x01, 0x39, 0xa9, 0x6b, 0xba, 0xdd, 0x2d, 0x29, 0xf9, 0x89,
	0xbe, 0x83, 0xe3, 0x3f, 0x49, 0x52, 0x50, 0xb5, 0x9e, 0xcc, 0xdb, 0xae, 0xad, 0x77, 0x9e, 0x5d,
	0xee, 0x3c, 0xfb, 0x57, 0xc9, 0xfa, 0x3a, 0xe8, 0xe5, 0xc1, 0x0b, 0xa3, 0xf7, 0x00, 0x9d, 0xff,
	0x35, 0xf7, 0x39, 0xca, 0x5e, 0xff, 0x6d, 0x40, 0x4d, 0x6f, 0x3e, 0xd4, 0x01, 0xd3, 0x1b, 0x07,
	0x53, 0x7f, 0xf2, 0xb3, 0xef, 0xce, 0x66, 0xd6, 0x17, 0xe8, 0x04, 0x1a, 0xa3, 0xbb, 0xf1, 0xc8,
	0x7d, 0xe3, 0x3a, 0x96, 0x81, 0x00, 0x6a, 0xf7, 0x77, 0x9e, 0xfc, 0x3e, 0x40, 0x2d, 0x68, 0x8e,
	0x26, 0x6f, 0xa7, 0x6f, 0xdc, 0xb9, 0xeb, 0x58, 0x87, 0xe8, 0x12, 0xce, 0xab, 0x63, 0xf0, 0xe8,
	0xcd, 0x5f, 0x07, 0xae, 0xef, 0x4f, 0xfc, 0x99, 0x75, 0x24, 0x23, 0x67, 0xa3, 0xd7, 0xae, 0xf3,
	0x20, 0x13, 0x8f, 0xe5, 0x71, 0xee, 0xbd, 0x75, 0x9d, 0x60, 0xf2, 0x30, 0xb7, 0x6a, 0xe8, 0x14,
	0x3a, 0xbe, 0x7b, 0xe7, 0xfc, 0x16, 0xdc, 0x4f, 0xfc, 0xc0, 0x77, 0xfd, 0x87, 0xb1, 0x55, 0x47,
	0x26, 0xd4, 0x67, 0xbf, 0x78, 0xd3, 0xa9, 0xeb, 0x58, 0x8d, 0x57, 0xce, 0xab, 0x9a, 0x34, 0x7b,
	0xba, 0xf8, 0xfd, 0xe5, 0x2a, 0x16, 0xef, 0x8a, 0x85, 0xbc, 0xad, 0xe1, 0xee, 0xb6, 0x86, 0xd5,
	0x6d, 0x0d, 0xc3, 0x24, 0xa6, 0x99, 0x18, 0xae, 0xd8, 0x8a, 0x6f, 0xc2, 0x3d, 0x5c, 0xfd, 0xcb,
	0x2c, 0x6a, 0xca, 0x80, 0xe7, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xe0, 0x94, 0x89, 0xa4,
	0x06, 0x00, 0x00,
}
