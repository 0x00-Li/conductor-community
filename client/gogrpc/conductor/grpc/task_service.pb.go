// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/task_service.proto

package grpc // import "github.com/netflix/conductor/client/gogrpc/conductor/grpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import model "github.com/netflix/conductor/client/gogrpc/conductor/model"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PollRequest struct {
	TaskType             string   `protobuf:"bytes,1,opt,name=task_type,json=taskType" json:"task_type,omitempty"`
	WorkerId             string   `protobuf:"bytes,2,opt,name=worker_id,json=workerId" json:"worker_id,omitempty"`
	Domain               string   `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollRequest) Reset()         { *m = PollRequest{} }
func (m *PollRequest) String() string { return proto.CompactTextString(m) }
func (*PollRequest) ProtoMessage()    {}
func (*PollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_service_d215da243254e00c, []int{0}
}
func (m *PollRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PollRequest.Unmarshal(m, b)
}
func (m *PollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PollRequest.Marshal(b, m, deterministic)
}
func (dst *PollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollRequest.Merge(dst, src)
}
func (m *PollRequest) XXX_Size() int {
	return xxx_messageInfo_PollRequest.Size(m)
}
func (m *PollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollRequest proto.InternalMessageInfo

func (m *PollRequest) GetTaskType() string {
	if m != nil {
		return m.TaskType
	}
	return ""
}

func (m *PollRequest) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

func (m *PollRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type StreamingPollRequest struct {
	TaskType             string              `protobuf:"bytes,1,opt,name=task_type,json=taskType" json:"task_type,omitempty"`
	WorkerId             string              `protobuf:"bytes,2,opt,name=worker_id,json=workerId" json:"worker_id,omitempty"`
	Domain               string              `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	Capacity             int32               `protobuf:"varint,4,opt,name=capacity" json:"capacity,omitempty"`
	Completed            []*model.TaskResult `protobuf:"bytes,5,rep,name=completed" json:"completed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *StreamingPollRequest) Reset()         { *m = StreamingPollRequest{} }
func (m *StreamingPollRequest) String() string { return proto.CompactTextString(m) }
func (*StreamingPollRequest) ProtoMessage()    {}
func (*StreamingPollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_service_d215da243254e00c, []int{1}
}
func (m *StreamingPollRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingPollRequest.Unmarshal(m, b)
}
func (m *StreamingPollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingPollRequest.Marshal(b, m, deterministic)
}
func (dst *StreamingPollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingPollRequest.Merge(dst, src)
}
func (m *StreamingPollRequest) XXX_Size() int {
	return xxx_messageInfo_StreamingPollRequest.Size(m)
}
func (m *StreamingPollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingPollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingPollRequest proto.InternalMessageInfo

func (m *StreamingPollRequest) GetTaskType() string {
	if m != nil {
		return m.TaskType
	}
	return ""
}

func (m *StreamingPollRequest) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

func (m *StreamingPollRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *StreamingPollRequest) GetCapacity() int32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *StreamingPollRequest) GetCompleted() []*model.TaskResult {
	if m != nil {
		return m.Completed
	}
	return nil
}

type TasksInProgressRequest struct {
	TaskType             string   `protobuf:"bytes,1,opt,name=task_type,json=taskType" json:"task_type,omitempty"`
	StartKey             string   `protobuf:"bytes,2,opt,name=start_key,json=startKey" json:"start_key,omitempty"`
	Count                int32    `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TasksInProgressRequest) Reset()         { *m = TasksInProgressRequest{} }
func (m *TasksInProgressRequest) String() string { return proto.CompactTextString(m) }
func (*TasksInProgressRequest) ProtoMessage()    {}
func (*TasksInProgressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_service_d215da243254e00c, []int{2}
}
func (m *TasksInProgressRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TasksInProgressRequest.Unmarshal(m, b)
}
func (m *TasksInProgressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TasksInProgressRequest.Marshal(b, m, deterministic)
}
func (dst *TasksInProgressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TasksInProgressRequest.Merge(dst, src)
}
func (m *TasksInProgressRequest) XXX_Size() int {
	return xxx_messageInfo_TasksInProgressRequest.Size(m)
}
func (m *TasksInProgressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TasksInProgressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TasksInProgressRequest proto.InternalMessageInfo

func (m *TasksInProgressRequest) GetTaskType() string {
	if m != nil {
		return m.TaskType
	}
	return ""
}

func (m *TasksInProgressRequest) GetStartKey() string {
	if m != nil {
		return m.StartKey
	}
	return ""
}

func (m *TasksInProgressRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type TasksInProgressResponse struct {
	Tasks                []*model.Task `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TasksInProgressResponse) Reset()         { *m = TasksInProgressResponse{} }
func (m *TasksInProgressResponse) String() string { return proto.CompactTextString(m) }
func (*TasksInProgressResponse) ProtoMessage()    {}
func (*TasksInProgressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_service_d215da243254e00c, []int{3}
}
func (m *TasksInProgressResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TasksInProgressResponse.Unmarshal(m, b)
}
func (m *TasksInProgressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TasksInProgressResponse.Marshal(b, m, deterministic)
}
func (dst *TasksInProgressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TasksInProgressResponse.Merge(dst, src)
}
func (m *TasksInProgressResponse) XXX_Size() int {
	return xxx_messageInfo_TasksInProgressResponse.Size(m)
}
func (m *TasksInProgressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TasksInProgressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TasksInProgressResponse proto.InternalMessageInfo

func (m *TasksInProgressResponse) GetTasks() []*model.Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type PendingTaskRequest struct {
	WorkflowId           string   `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId" json:"workflow_id,omitempty"`
	TaskRefName          string   `protobuf:"bytes,2,opt,name=task_ref_name,json=taskRefName" json:"task_ref_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PendingTaskRequest) Reset()         { *m = PendingTaskRequest{} }
func (m *PendingTaskRequest) String() string { return proto.CompactTextString(m) }
func (*PendingTaskRequest) ProtoMessage()    {}
func (*PendingTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_service_d215da243254e00c, []int{4}
}
func (m *PendingTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PendingTaskRequest.Unmarshal(m, b)
}
func (m *PendingTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PendingTaskRequest.Marshal(b, m, deterministic)
}
func (dst *PendingTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingTaskRequest.Merge(dst, src)
}
func (m *PendingTaskRequest) XXX_Size() int {
	return xxx_messageInfo_PendingTaskRequest.Size(m)
}
func (m *PendingTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PendingTaskRequest proto.InternalMessageInfo

func (m *PendingTaskRequest) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *PendingTaskRequest) GetTaskRefName() string {
	if m != nil {
		return m.TaskRefName
	}
	return ""
}

type TaskUpdateResponse struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskUpdateResponse) Reset()         { *m = TaskUpdateResponse{} }
func (m *TaskUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*TaskUpdateResponse) ProtoMessage()    {}
func (*TaskUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_service_d215da243254e00c, []int{5}
}
func (m *TaskUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskUpdateResponse.Unmarshal(m, b)
}
func (m *TaskUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskUpdateResponse.Marshal(b, m, deterministic)
}
func (dst *TaskUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskUpdateResponse.Merge(dst, src)
}
func (m *TaskUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_TaskUpdateResponse.Size(m)
}
func (m *TaskUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TaskUpdateResponse proto.InternalMessageInfo

func (m *TaskUpdateResponse) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type AckTaskRequest struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	WorkerId             string   `protobuf:"bytes,2,opt,name=worker_id,json=workerId" json:"worker_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckTaskRequest) Reset()         { *m = AckTaskRequest{} }
func (m *AckTaskRequest) String() string { return proto.CompactTextString(m) }
func (*AckTaskRequest) ProtoMessage()    {}
func (*AckTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_service_d215da243254e00c, []int{6}
}
func (m *AckTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckTaskRequest.Unmarshal(m, b)
}
func (m *AckTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckTaskRequest.Marshal(b, m, deterministic)
}
func (dst *AckTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckTaskRequest.Merge(dst, src)
}
func (m *AckTaskRequest) XXX_Size() int {
	return xxx_messageInfo_AckTaskRequest.Size(m)
}
func (m *AckTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AckTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AckTaskRequest proto.InternalMessageInfo

func (m *AckTaskRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *AckTaskRequest) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

type AckTaskResponse struct {
	Ack                  bool     `protobuf:"varint,1,opt,name=ack" json:"ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckTaskResponse) Reset()         { *m = AckTaskResponse{} }
func (m *AckTaskResponse) String() string { return proto.CompactTextString(m) }
func (*AckTaskResponse) ProtoMessage()    {}
func (*AckTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_service_d215da243254e00c, []int{7}
}
func (m *AckTaskResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckTaskResponse.Unmarshal(m, b)
}
func (m *AckTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckTaskResponse.Marshal(b, m, deterministic)
}
func (dst *AckTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckTaskResponse.Merge(dst, src)
}
func (m *AckTaskResponse) XXX_Size() int {
	return xxx_messageInfo_AckTaskResponse.Size(m)
}
func (m *AckTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AckTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AckTaskResponse proto.InternalMessageInfo

func (m *AckTaskResponse) GetAck() bool {
	if m != nil {
		return m.Ack
	}
	return false
}

type AddLogRequest struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	Log                  string   `protobuf:"bytes,2,opt,name=log" json:"log,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddLogRequest) Reset()         { *m = AddLogRequest{} }
func (m *AddLogRequest) String() string { return proto.CompactTextString(m) }
func (*AddLogRequest) ProtoMessage()    {}
func (*AddLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_service_d215da243254e00c, []int{8}
}
func (m *AddLogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddLogRequest.Unmarshal(m, b)
}
func (m *AddLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddLogRequest.Marshal(b, m, deterministic)
}
func (dst *AddLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddLogRequest.Merge(dst, src)
}
func (m *AddLogRequest) XXX_Size() int {
	return xxx_messageInfo_AddLogRequest.Size(m)
}
func (m *AddLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddLogRequest proto.InternalMessageInfo

func (m *AddLogRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *AddLogRequest) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

type TaskId struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskId) Reset()         { *m = TaskId{} }
func (m *TaskId) String() string { return proto.CompactTextString(m) }
func (*TaskId) ProtoMessage()    {}
func (*TaskId) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_service_d215da243254e00c, []int{9}
}
func (m *TaskId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskId.Unmarshal(m, b)
}
func (m *TaskId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskId.Marshal(b, m, deterministic)
}
func (dst *TaskId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskId.Merge(dst, src)
}
func (m *TaskId) XXX_Size() int {
	return xxx_messageInfo_TaskId.Size(m)
}
func (m *TaskId) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskId.DiscardUnknown(m)
}

var xxx_messageInfo_TaskId proto.InternalMessageInfo

func (m *TaskId) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type GetLogsResponse struct {
	Logs                 []*model.TaskExecLog `protobuf:"bytes,1,rep,name=logs" json:"logs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetLogsResponse) Reset()         { *m = GetLogsResponse{} }
func (m *GetLogsResponse) String() string { return proto.CompactTextString(m) }
func (*GetLogsResponse) ProtoMessage()    {}
func (*GetLogsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_service_d215da243254e00c, []int{10}
}
func (m *GetLogsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLogsResponse.Unmarshal(m, b)
}
func (m *GetLogsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLogsResponse.Marshal(b, m, deterministic)
}
func (dst *GetLogsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLogsResponse.Merge(dst, src)
}
func (m *GetLogsResponse) XXX_Size() int {
	return xxx_messageInfo_GetLogsResponse.Size(m)
}
func (m *GetLogsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLogsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLogsResponse proto.InternalMessageInfo

func (m *GetLogsResponse) GetLogs() []*model.TaskExecLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

func init() {
	proto.RegisterType((*PollRequest)(nil), "com.netflix.conductor.grpc.PollRequest")
	proto.RegisterType((*StreamingPollRequest)(nil), "com.netflix.conductor.grpc.StreamingPollRequest")
	proto.RegisterType((*TasksInProgressRequest)(nil), "com.netflix.conductor.grpc.TasksInProgressRequest")
	proto.RegisterType((*TasksInProgressResponse)(nil), "com.netflix.conductor.grpc.TasksInProgressResponse")
	proto.RegisterType((*PendingTaskRequest)(nil), "com.netflix.conductor.grpc.PendingTaskRequest")
	proto.RegisterType((*TaskUpdateResponse)(nil), "com.netflix.conductor.grpc.TaskUpdateResponse")
	proto.RegisterType((*AckTaskRequest)(nil), "com.netflix.conductor.grpc.AckTaskRequest")
	proto.RegisterType((*AckTaskResponse)(nil), "com.netflix.conductor.grpc.AckTaskResponse")
	proto.RegisterType((*AddLogRequest)(nil), "com.netflix.conductor.grpc.AddLogRequest")
	proto.RegisterType((*TaskId)(nil), "com.netflix.conductor.grpc.TaskId")
	proto.RegisterType((*GetLogsResponse)(nil), "com.netflix.conductor.grpc.GetLogsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskServiceClient interface {
	Poll(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*model.Task, error)
	PollStream(ctx context.Context, opts ...grpc.CallOption) (TaskService_PollStreamClient, error)
	GetTasksInProgress(ctx context.Context, in *TasksInProgressRequest, opts ...grpc.CallOption) (*TasksInProgressResponse, error)
	GetPendingTaskForWorkflow(ctx context.Context, in *PendingTaskRequest, opts ...grpc.CallOption) (*model.Task, error)
	UpdateTask(ctx context.Context, in *model.TaskResult, opts ...grpc.CallOption) (*TaskUpdateResponse, error)
	AckTask(ctx context.Context, in *AckTaskRequest, opts ...grpc.CallOption) (*AckTaskResponse, error)
	AddLog(ctx context.Context, in *AddLogRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetLogs(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*GetLogsResponse, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) Poll(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*model.Task, error) {
	out := new(model.Task)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.TaskService/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) PollStream(ctx context.Context, opts ...grpc.CallOption) (TaskService_PollStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TaskService_serviceDesc.Streams[0], "/com.netflix.conductor.grpc.TaskService/PollStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskServicePollStreamClient{stream}
	return x, nil
}

type TaskService_PollStreamClient interface {
	Send(*StreamingPollRequest) error
	Recv() (*model.Task, error)
	grpc.ClientStream
}

type taskServicePollStreamClient struct {
	grpc.ClientStream
}

func (x *taskServicePollStreamClient) Send(m *StreamingPollRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taskServicePollStreamClient) Recv() (*model.Task, error) {
	m := new(model.Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskServiceClient) GetTasksInProgress(ctx context.Context, in *TasksInProgressRequest, opts ...grpc.CallOption) (*TasksInProgressResponse, error) {
	out := new(TasksInProgressResponse)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.TaskService/GetTasksInProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetPendingTaskForWorkflow(ctx context.Context, in *PendingTaskRequest, opts ...grpc.CallOption) (*model.Task, error) {
	out := new(model.Task)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.TaskService/GetPendingTaskForWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateTask(ctx context.Context, in *model.TaskResult, opts ...grpc.CallOption) (*TaskUpdateResponse, error) {
	out := new(TaskUpdateResponse)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.TaskService/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) AckTask(ctx context.Context, in *AckTaskRequest, opts ...grpc.CallOption) (*AckTaskResponse, error) {
	out := new(AckTaskResponse)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.TaskService/AckTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) AddLog(ctx context.Context, in *AddLogRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.TaskService/AddLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetLogs(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*GetLogsResponse, error) {
	out := new(GetLogsResponse)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.TaskService/GetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
type TaskServiceServer interface {
	Poll(context.Context, *PollRequest) (*model.Task, error)
	PollStream(TaskService_PollStreamServer) error
	GetTasksInProgress(context.Context, *TasksInProgressRequest) (*TasksInProgressResponse, error)
	GetPendingTaskForWorkflow(context.Context, *PendingTaskRequest) (*model.Task, error)
	UpdateTask(context.Context, *model.TaskResult) (*TaskUpdateResponse, error)
	AckTask(context.Context, *AckTaskRequest) (*AckTaskResponse, error)
	AddLog(context.Context, *AddLogRequest) (*empty.Empty, error)
	GetLogs(context.Context, *TaskId) (*GetLogsResponse, error)
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.TaskService/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Poll(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_PollStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskServiceServer).PollStream(&taskServicePollStreamServer{stream})
}

type TaskService_PollStreamServer interface {
	Send(*model.Task) error
	Recv() (*StreamingPollRequest, error)
	grpc.ServerStream
}

type taskServicePollStreamServer struct {
	grpc.ServerStream
}

func (x *taskServicePollStreamServer) Send(m *model.Task) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taskServicePollStreamServer) Recv() (*StreamingPollRequest, error) {
	m := new(StreamingPollRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TaskService_GetTasksInProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TasksInProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTasksInProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.TaskService/GetTasksInProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTasksInProgress(ctx, req.(*TasksInProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetPendingTaskForWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PendingTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetPendingTaskForWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.TaskService/GetPendingTaskForWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetPendingTaskForWorkflow(ctx, req.(*PendingTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.TaskResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.TaskService/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateTask(ctx, req.(*model.TaskResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_AckTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).AckTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.TaskService/AckTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).AckTask(ctx, req.(*AckTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_AddLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).AddLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.TaskService/AddLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).AddLog(ctx, req.(*AddLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.TaskService/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetLogs(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.netflix.conductor.grpc.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Poll",
			Handler:    _TaskService_Poll_Handler,
		},
		{
			MethodName: "GetTasksInProgress",
			Handler:    _TaskService_GetTasksInProgress_Handler,
		},
		{
			MethodName: "GetPendingTaskForWorkflow",
			Handler:    _TaskService_GetPendingTaskForWorkflow_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _TaskService_UpdateTask_Handler,
		},
		{
			MethodName: "AckTask",
			Handler:    _TaskService_AckTask_Handler,
		},
		{
			MethodName: "AddLog",
			Handler:    _TaskService_AddLog_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _TaskService_GetLogs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PollStream",
			Handler:       _TaskService_PollStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/task_service.proto",
}

func init() {
	proto.RegisterFile("grpc/task_service.proto", fileDescriptor_task_service_d215da243254e00c)
}

var fileDescriptor_task_service_d215da243254e00c = []byte{
	// 701 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x4f, 0x4f, 0xdb, 0x4a,
	0x10, 0x97, 0x5f, 0x48, 0x80, 0x89, 0x78, 0xa0, 0x15, 0x4a, 0xf2, 0xcc, 0xe1, 0x81, 0xdf, 0xe1,
	0xa5, 0xad, 0x6a, 0x23, 0x38, 0x54, 0xad, 0x7a, 0x01, 0x09, 0x50, 0x0a, 0x6a, 0x23, 0x43, 0x55,
	0x95, 0x4b, 0xe4, 0xac, 0x27, 0x8b, 0x15, 0xdb, 0xeb, 0xae, 0x37, 0x85, 0x1c, 0xfa, 0x89, 0xfa,
	0x51, 0xfa, 0xa5, 0xaa, 0xdd, 0x75, 0xfe, 0x94, 0x3f, 0x4e, 0x7a, 0xe8, 0xcd, 0x33, 0xb3, 0xf3,
	0x9b, 0xf9, 0xcd, 0xce, 0xcf, 0x0b, 0x4d, 0x26, 0x32, 0xea, 0xc9, 0x20, 0x1f, 0xf6, 0x72, 0x14,
	0x5f, 0x23, 0x8a, 0x6e, 0x26, 0xb8, 0xe4, 0xc4, 0xa6, 0x3c, 0x71, 0x53, 0x94, 0x83, 0x38, 0xba,
	0x73, 0x29, 0x4f, 0xc3, 0x11, 0x95, 0x5c, 0xb8, 0xea, 0xb8, 0xbd, 0xc3, 0x38, 0x67, 0x31, 0x7a,
	0xfa, 0x64, 0x7f, 0x34, 0xf0, 0x30, 0xc9, 0xe4, 0xd8, 0x24, 0xda, 0xcd, 0x84, 0x87, 0x18, 0x6b,
	0x48, 0xbc, 0x43, 0x1a, 0x73, 0x56, 0x04, 0x1a, 0xb3, 0x80, 0xc0, 0x7c, 0x14, 0xcb, 0xc2, 0xbf,
	0x35, 0xf3, 0x1b, 0x8f, 0xd3, 0x83, 0x7a, 0x97, 0xc7, 0xb1, 0x8f, 0x5f, 0x46, 0x98, 0x4b, 0xb2,
	0x03, 0xeb, 0xba, 0x41, 0x39, 0xce, 0xb0, 0x65, 0xed, 0x5a, 0xed, 0x75, 0x7f, 0x4d, 0x39, 0xae,
	0xc6, 0x19, 0xaa, 0xe0, 0x2d, 0x17, 0x43, 0x14, 0xbd, 0x28, 0x6c, 0xfd, 0x65, 0x82, 0xc6, 0xd1,
	0x09, 0x49, 0x03, 0x6a, 0x21, 0x4f, 0x82, 0x28, 0x6d, 0x55, 0x74, 0xa4, 0xb0, 0x9c, 0x1f, 0x16,
	0x6c, 0x5f, 0x4a, 0x81, 0x41, 0x12, 0xa5, 0xec, 0x8f, 0x96, 0x22, 0x36, 0xac, 0xd1, 0x20, 0x0b,
	0x68, 0x24, 0xc7, 0xad, 0x95, 0x5d, 0xab, 0x5d, 0xf5, 0xa7, 0x36, 0x39, 0x81, 0x75, 0xca, 0x93,
	0x2c, 0x46, 0x89, 0x61, 0xab, 0xba, 0x5b, 0x69, 0xd7, 0x0f, 0xfe, 0x77, 0x1f, 0x9f, 0xbb, 0x1e,
	0x8c, 0x7b, 0x15, 0xe4, 0x43, 0x5f, 0xcf, 0xce, 0x9f, 0x65, 0x3a, 0x37, 0xd0, 0x50, 0x81, 0xbc,
	0x93, 0x76, 0x05, 0x67, 0x02, 0xf3, 0x7c, 0x59, 0x3a, 0xb9, 0x0c, 0x84, 0xec, 0x0d, 0x71, 0x3c,
	0xa1, 0xa3, 0x1d, 0xe7, 0x38, 0x26, 0xdb, 0x50, 0xa5, 0x7c, 0x94, 0x4a, 0xcd, 0xa6, 0xea, 0x1b,
	0xc3, 0xf1, 0xa1, 0xf9, 0xa0, 0x52, 0x9e, 0xf1, 0x34, 0x47, 0xf2, 0x0a, 0xaa, 0x0a, 0x39, 0x6f,
	0x59, 0x9a, 0xc7, 0xde, 0x62, 0x1e, 0xe6, 0xbc, 0xf3, 0x19, 0x48, 0x17, 0xd3, 0x30, 0x4a, 0x99,
	0x61, 0x67, 0x3a, 0xff, 0x17, 0xea, 0x6a, 0xb4, 0x83, 0x98, 0xdf, 0xaa, 0x69, 0x9b, 0xde, 0x61,
	0xe2, 0xea, 0x84, 0xc4, 0x81, 0x0d, 0x4d, 0x4d, 0xe0, 0xa0, 0x97, 0x06, 0x09, 0x16, 0x0c, 0xea,
	0x52, 0x83, 0x0c, 0xde, 0x07, 0x09, 0x3a, 0x2f, 0x81, 0x28, 0xcc, 0x8f, 0x59, 0x18, 0x48, 0x9c,
	0x76, 0xda, 0x84, 0x55, 0x9d, 0x39, 0x85, 0xad, 0x29, 0xb3, 0x13, 0x3a, 0xa7, 0xf0, 0xf7, 0x11,
	0x1d, 0xce, 0x77, 0xf1, 0xd4, 0xd1, 0xd2, 0x55, 0x70, 0xfe, 0x83, 0xcd, 0x29, 0x4e, 0x51, 0x73,
	0x0b, 0x2a, 0x01, 0x1d, 0x6a, 0x90, 0x35, 0x5f, 0x7d, 0x3a, 0x6f, 0x60, 0xe3, 0x28, 0x0c, 0x2f,
	0x38, 0x5b, 0x58, 0x6b, 0x0b, 0x2a, 0x31, 0x67, 0x45, 0x15, 0xf5, 0xe9, 0xec, 0x41, 0xed, 0xca,
	0xc4, 0x9e, 0xe4, 0xf2, 0x01, 0x36, 0xcf, 0x50, 0x5e, 0x70, 0x36, 0xbb, 0xa1, 0xb7, 0xb0, 0x12,
	0x73, 0x36, 0xb9, 0xa0, 0xf6, 0xc2, 0x0b, 0x3a, 0xb9, 0x43, 0xaa, 0xfa, 0xd3, 0x59, 0x07, 0xdf,
	0x6b, 0x50, 0x57, 0xde, 0x4b, 0xf3, 0x97, 0x20, 0x3e, 0xac, 0x28, 0xe1, 0x90, 0xa7, 0x16, 0x56,
	0xfd, 0x28, 0xdc, 0x39, 0x69, 0xd9, 0x8b, 0x37, 0x82, 0x20, 0x80, 0xca, 0x30, 0xca, 0x24, 0xfb,
	0x65, 0xc8, 0x8f, 0xa9, 0x77, 0x89, 0x12, 0x6d, 0x6b, 0xdf, 0x22, 0xdf, 0x80, 0x9c, 0xa1, 0xbc,
	0xb7, 0xc8, 0xe4, 0xa0, 0xac, 0xdc, 0xe3, 0xfa, 0xb2, 0x0f, 0x7f, 0x2b, 0xa7, 0xb8, 0x87, 0x14,
	0xfe, 0x39, 0x43, 0x39, 0xb7, 0xf3, 0xa7, 0x5c, 0x7c, 0x2a, 0x16, 0x9b, 0xb8, 0xa5, 0xe3, 0x7c,
	0xa0, 0x93, 0x25, 0xa7, 0x6a, 0x14, 0xa0, 0xad, 0x65, 0x7f, 0x30, 0xb6, 0xbb, 0x88, 0xdb, 0x3d,
	0x59, 0xf5, 0x61, 0xb5, 0xd8, 0x7a, 0xf2, 0xbc, 0x2c, 0xf5, 0x57, 0x89, 0xd9, 0x2f, 0x96, 0x3a,
	0x5b, 0xd4, 0x38, 0x87, 0x9a, 0x11, 0x0d, 0x79, 0x56, 0x9a, 0x36, 0x2f, 0x2c, 0xbb, 0xe1, 0x9a,
	0xe7, 0xca, 0x9d, 0x3c, 0x57, 0xee, 0x89, 0x7a, 0xae, 0xc8, 0x35, 0xac, 0x16, 0x12, 0x21, 0xce,
	0x22, 0xae, 0x9d, 0xb0, 0xbc, 0xd1, 0x7b, 0x5a, 0x3b, 0x7e, 0x77, 0xbc, 0x31, 0x27, 0x96, 0x6e,
	0xff, 0xfa, 0x35, 0x8b, 0xe4, 0xcd, 0xa8, 0xaf, 0x30, 0xbc, 0x02, 0xc3, 0x9b, 0x62, 0x78, 0x34,
	0x8e, 0x30, 0x95, 0x1e, 0xe3, 0xfa, 0x35, 0x9e, 0xf9, 0x95, 0xd9, 0xaf, 0xe9, 0xbe, 0x0f, 0x7f,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x57, 0x8d, 0x4b, 0x26, 0xab, 0x07, 0x00, 0x00,
}
