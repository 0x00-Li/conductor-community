// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/metadata_service.proto

package grpc // import "github.com/netflix/conductor/client/gogrpc/conductor/grpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import model "github.com/netflix/conductor/client/gogrpc/conductor/model"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UpdateWorkflowsRequest struct {
	Defs                 []*model.WorkflowDef `protobuf:"bytes,1,rep,name=defs" json:"defs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UpdateWorkflowsRequest) Reset()         { *m = UpdateWorkflowsRequest{} }
func (m *UpdateWorkflowsRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateWorkflowsRequest) ProtoMessage()    {}
func (*UpdateWorkflowsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_metadata_service_0ab7c38dd4dbd338, []int{0}
}
func (m *UpdateWorkflowsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateWorkflowsRequest.Unmarshal(m, b)
}
func (m *UpdateWorkflowsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateWorkflowsRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateWorkflowsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWorkflowsRequest.Merge(dst, src)
}
func (m *UpdateWorkflowsRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateWorkflowsRequest.Size(m)
}
func (m *UpdateWorkflowsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWorkflowsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWorkflowsRequest proto.InternalMessageInfo

func (m *UpdateWorkflowsRequest) GetDefs() []*model.WorkflowDef {
	if m != nil {
		return m.Defs
	}
	return nil
}

type CreateTasksRequest struct {
	Defs                 []*model.TaskDef `protobuf:"bytes,1,rep,name=defs" json:"defs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CreateTasksRequest) Reset()         { *m = CreateTasksRequest{} }
func (m *CreateTasksRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTasksRequest) ProtoMessage()    {}
func (*CreateTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_metadata_service_0ab7c38dd4dbd338, []int{1}
}
func (m *CreateTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTasksRequest.Unmarshal(m, b)
}
func (m *CreateTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTasksRequest.Marshal(b, m, deterministic)
}
func (dst *CreateTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTasksRequest.Merge(dst, src)
}
func (m *CreateTasksRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTasksRequest.Size(m)
}
func (m *CreateTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTasksRequest proto.InternalMessageInfo

func (m *CreateTasksRequest) GetDefs() []*model.TaskDef {
	if m != nil {
		return m.Defs
	}
	return nil
}

type GetWorkflowRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version              int32    `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWorkflowRequest) Reset()         { *m = GetWorkflowRequest{} }
func (m *GetWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*GetWorkflowRequest) ProtoMessage()    {}
func (*GetWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_metadata_service_0ab7c38dd4dbd338, []int{2}
}
func (m *GetWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWorkflowRequest.Unmarshal(m, b)
}
func (m *GetWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWorkflowRequest.Marshal(b, m, deterministic)
}
func (dst *GetWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkflowRequest.Merge(dst, src)
}
func (m *GetWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_GetWorkflowRequest.Size(m)
}
func (m *GetWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkflowRequest proto.InternalMessageInfo

func (m *GetWorkflowRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetWorkflowRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type GetTaskRequest struct {
	TaskType             string   `protobuf:"bytes,1,opt,name=task_type,json=taskType" json:"task_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTaskRequest) Reset()         { *m = GetTaskRequest{} }
func (m *GetTaskRequest) String() string { return proto.CompactTextString(m) }
func (*GetTaskRequest) ProtoMessage()    {}
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_metadata_service_0ab7c38dd4dbd338, []int{3}
}
func (m *GetTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTaskRequest.Unmarshal(m, b)
}
func (m *GetTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTaskRequest.Marshal(b, m, deterministic)
}
func (dst *GetTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskRequest.Merge(dst, src)
}
func (m *GetTaskRequest) XXX_Size() int {
	return xxx_messageInfo_GetTaskRequest.Size(m)
}
func (m *GetTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskRequest proto.InternalMessageInfo

func (m *GetTaskRequest) GetTaskType() string {
	if m != nil {
		return m.TaskType
	}
	return ""
}

func init() {
	proto.RegisterType((*UpdateWorkflowsRequest)(nil), "com.netflix.conductor.grpc.UpdateWorkflowsRequest")
	proto.RegisterType((*CreateTasksRequest)(nil), "com.netflix.conductor.grpc.CreateTasksRequest")
	proto.RegisterType((*GetWorkflowRequest)(nil), "com.netflix.conductor.grpc.GetWorkflowRequest")
	proto.RegisterType((*GetTaskRequest)(nil), "com.netflix.conductor.grpc.GetTaskRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetadataServiceClient is the client API for MetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetadataServiceClient interface {
	// POST /workflow
	CreateWorkflow(ctx context.Context, in *model.WorkflowDef, opts ...grpc.CallOption) (*empty.Empty, error)
	// PUT /workflow
	UpdateWorkflows(ctx context.Context, in *UpdateWorkflowsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GET /workflow/{name}
	GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*model.WorkflowDef, error)
	// GET /workflow
	GetAllWorkflows(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MetadataService_GetAllWorkflowsClient, error)
	// POST /taskdefs
	CreateTasks(ctx context.Context, in *CreateTasksRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// PUT /taskdefs
	UpdateTask(ctx context.Context, in *model.TaskDef, opts ...grpc.CallOption) (*empty.Empty, error)
	// GET /taskdefs/{tasktype}
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*model.TaskDef, error)
	// GET /taskdefs
	GetAllTasks(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MetadataService_GetAllTasksClient, error)
	// DELETE /taskdefs/{tasktype}
	DeleteTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type metadataServiceClient struct {
	cc *grpc.ClientConn
}

func NewMetadataServiceClient(cc *grpc.ClientConn) MetadataServiceClient {
	return &metadataServiceClient{cc}
}

func (c *metadataServiceClient) CreateWorkflow(ctx context.Context, in *model.WorkflowDef, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.MetadataService/CreateWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) UpdateWorkflows(ctx context.Context, in *UpdateWorkflowsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.MetadataService/UpdateWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*model.WorkflowDef, error) {
	out := new(model.WorkflowDef)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.MetadataService/GetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetAllWorkflows(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MetadataService_GetAllWorkflowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MetadataService_serviceDesc.Streams[0], "/com.netflix.conductor.grpc.MetadataService/GetAllWorkflows", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataServiceGetAllWorkflowsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetadataService_GetAllWorkflowsClient interface {
	Recv() (*model.WorkflowDef, error)
	grpc.ClientStream
}

type metadataServiceGetAllWorkflowsClient struct {
	grpc.ClientStream
}

func (x *metadataServiceGetAllWorkflowsClient) Recv() (*model.WorkflowDef, error) {
	m := new(model.WorkflowDef)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataServiceClient) CreateTasks(ctx context.Context, in *CreateTasksRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.MetadataService/CreateTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) UpdateTask(ctx context.Context, in *model.TaskDef, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.MetadataService/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*model.TaskDef, error) {
	out := new(model.TaskDef)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.MetadataService/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetAllTasks(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MetadataService_GetAllTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MetadataService_serviceDesc.Streams[1], "/com.netflix.conductor.grpc.MetadataService/GetAllTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataServiceGetAllTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetadataService_GetAllTasksClient interface {
	Recv() (*model.TaskDef, error)
	grpc.ClientStream
}

type metadataServiceGetAllTasksClient struct {
	grpc.ClientStream
}

func (x *metadataServiceGetAllTasksClient) Recv() (*model.TaskDef, error) {
	m := new(model.TaskDef)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataServiceClient) DeleteTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.MetadataService/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServiceServer is the server API for MetadataService service.
type MetadataServiceServer interface {
	// POST /workflow
	CreateWorkflow(context.Context, *model.WorkflowDef) (*empty.Empty, error)
	// PUT /workflow
	UpdateWorkflows(context.Context, *UpdateWorkflowsRequest) (*empty.Empty, error)
	// GET /workflow/{name}
	GetWorkflow(context.Context, *GetWorkflowRequest) (*model.WorkflowDef, error)
	// GET /workflow
	GetAllWorkflows(*empty.Empty, MetadataService_GetAllWorkflowsServer) error
	// POST /taskdefs
	CreateTasks(context.Context, *CreateTasksRequest) (*empty.Empty, error)
	// PUT /taskdefs
	UpdateTask(context.Context, *model.TaskDef) (*empty.Empty, error)
	// GET /taskdefs/{tasktype}
	GetTask(context.Context, *GetTaskRequest) (*model.TaskDef, error)
	// GET /taskdefs
	GetAllTasks(*empty.Empty, MetadataService_GetAllTasksServer) error
	// DELETE /taskdefs/{tasktype}
	DeleteTask(context.Context, *GetTaskRequest) (*empty.Empty, error)
}

func RegisterMetadataServiceServer(s *grpc.Server, srv MetadataServiceServer) {
	s.RegisterService(&_MetadataService_serviceDesc, srv)
}

func _MetadataService_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.WorkflowDef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.MetadataService/CreateWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).CreateWorkflow(ctx, req.(*model.WorkflowDef))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_UpdateWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).UpdateWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.MetadataService/UpdateWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).UpdateWorkflows(ctx, req.(*UpdateWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.MetadataService/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetWorkflow(ctx, req.(*GetWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetAllWorkflows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataServiceServer).GetAllWorkflows(m, &metadataServiceGetAllWorkflowsServer{stream})
}

type MetadataService_GetAllWorkflowsServer interface {
	Send(*model.WorkflowDef) error
	grpc.ServerStream
}

type metadataServiceGetAllWorkflowsServer struct {
	grpc.ServerStream
}

func (x *metadataServiceGetAllWorkflowsServer) Send(m *model.WorkflowDef) error {
	return x.ServerStream.SendMsg(m)
}

func _MetadataService_CreateTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).CreateTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.MetadataService/CreateTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).CreateTasks(ctx, req.(*CreateTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.TaskDef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.MetadataService/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).UpdateTask(ctx, req.(*model.TaskDef))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.MetadataService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetAllTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataServiceServer).GetAllTasks(m, &metadataServiceGetAllTasksServer{stream})
}

type MetadataService_GetAllTasksServer interface {
	Send(*model.TaskDef) error
	grpc.ServerStream
}

type metadataServiceGetAllTasksServer struct {
	grpc.ServerStream
}

func (x *metadataServiceGetAllTasksServer) Send(m *model.TaskDef) error {
	return x.ServerStream.SendMsg(m)
}

func _MetadataService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.MetadataService/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetadataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.netflix.conductor.grpc.MetadataService",
	HandlerType: (*MetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkflow",
			Handler:    _MetadataService_CreateWorkflow_Handler,
		},
		{
			MethodName: "UpdateWorkflows",
			Handler:    _MetadataService_UpdateWorkflows_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _MetadataService_GetWorkflow_Handler,
		},
		{
			MethodName: "CreateTasks",
			Handler:    _MetadataService_CreateTasks_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _MetadataService_UpdateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _MetadataService_GetTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _MetadataService_DeleteTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllWorkflows",
			Handler:       _MetadataService_GetAllWorkflows_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllTasks",
			Handler:       _MetadataService_GetAllTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/metadata_service.proto",
}

func init() {
	proto.RegisterFile("grpc/metadata_service.proto", fileDescriptor_metadata_service_0ab7c38dd4dbd338)
}

var fileDescriptor_metadata_service_0ab7c38dd4dbd338 = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xdf, 0x6b, 0xd3, 0x50,
	0x14, 0xc7, 0x89, 0xce, 0xcd, 0x9d, 0xc2, 0x8a, 0x47, 0x98, 0x25, 0x7d, 0x29, 0xc5, 0x87, 0x22,
	0x78, 0x33, 0xea, 0x8b, 0x82, 0x2f, 0xab, 0x93, 0x82, 0xb0, 0x31, 0xe2, 0xaa, 0xa0, 0xc8, 0x48,
	0x93, 0x93, 0x18, 0x7a, 0x93, 0x1b, 0x93, 0x93, 0xcd, 0xfe, 0x41, 0xfe, 0x9f, 0x72, 0xf3, 0xa3,
	0xad, 0x5b, 0x53, 0xb3, 0xb7, 0xde, 0x73, 0xef, 0xf9, 0x9c, 0x73, 0xbe, 0xdf, 0xd3, 0x40, 0x3f,
	0x48, 0x13, 0xd7, 0x8a, 0x88, 0x1d, 0xcf, 0x61, 0xe7, 0x3a, 0xa3, 0xf4, 0x26, 0x74, 0x49, 0x24,
	0xa9, 0x62, 0x85, 0xa6, 0xab, 0x22, 0x11, 0x13, 0xfb, 0x32, 0xfc, 0x2d, 0x5c, 0x15, 0x7b, 0xb9,
	0xcb, 0x2a, 0x15, 0x3a, 0xc5, 0xec, 0x07, 0x4a, 0x05, 0x92, 0xac, 0xe2, 0xe5, 0x3c, 0xf7, 0x2d,
	0x8a, 0x12, 0x5e, 0x96, 0x89, 0xe6, 0xf3, 0x48, 0x79, 0x24, 0x2d, 0x76, 0xb2, 0x85, 0x47, 0x7e,
	0x15, 0x7c, 0x51, 0x06, 0x6f, 0x55, 0xba, 0xf0, 0xa5, 0xba, 0x5d, 0x5d, 0x0c, 0xbf, 0xc0, 0xf1,
	0x2c, 0xf1, 0x1c, 0xa6, 0xaf, 0xd5, 0x55, 0x66, 0xd3, 0xaf, 0x9c, 0x32, 0xc6, 0xf7, 0xb0, 0xe7,
	0x91, 0x9f, 0xf5, 0x8c, 0xc1, 0xe3, 0x51, 0x67, 0x3c, 0x12, 0xdb, 0xfb, 0x29, 0x28, 0xa2, 0x4e,
	0x3e, 0x23, 0xdf, 0x2e, 0xb2, 0x86, 0x17, 0x80, 0x1f, 0x52, 0x72, 0x98, 0xae, 0x9c, 0x6c, 0xb1,
	0x62, 0xbe, 0xfd, 0x87, 0xf9, 0x72, 0x27, 0x53, 0x27, 0xae, 0x79, 0x13, 0xc0, 0x29, 0x71, 0x5d,
	0xa7, 0xe6, 0x21, 0xec, 0xc5, 0x4e, 0x44, 0x3d, 0x63, 0x60, 0x8c, 0x0e, 0xed, 0xe2, 0x37, 0xf6,
	0xe0, 0xe0, 0x86, 0xd2, 0x2c, 0x54, 0x71, 0xef, 0xd1, 0xc0, 0x18, 0x3d, 0xb1, 0xeb, 0xe3, 0xf0,
	0x35, 0x1c, 0x4d, 0x89, 0x35, 0xb7, 0xce, 0xef, 0xc3, 0xa1, 0xd6, 0xe9, 0x9a, 0x97, 0x49, 0x0d,
	0x79, 0xaa, 0x03, 0x57, 0xcb, 0x84, 0xc6, 0x7f, 0xf6, 0xa1, 0x7b, 0x5e, 0x99, 0xf3, 0xb9, 0xf4,
	0x06, 0x6d, 0x38, 0x2a, 0xc7, 0xaa, 0x3b, 0xc1, 0xd6, 0xc2, 0x98, 0xc7, 0xa2, 0xb4, 0x4d, 0xd4,
	0xb6, 0x89, 0x8f, 0xda, 0x36, 0xfc, 0x01, 0xdd, 0x3b, 0x16, 0xe0, 0x58, 0x34, 0xbb, 0x2f, 0xb6,
	0xfb, 0xd5, 0x88, 0x0f, 0xa0, 0xb3, 0xa1, 0x1c, 0x8a, 0x5d, 0xe8, 0xfb, 0x12, 0x9b, 0xad, 0xe7,
	0xc3, 0x19, 0x74, 0xa7, 0xc4, 0xa7, 0x52, 0xae, 0xe7, 0x68, 0xe8, 0xa9, 0x3d, 0xf4, 0xc4, 0xc0,
	0x19, 0x74, 0x36, 0x36, 0x69, 0x77, 0xff, 0xf7, 0x57, 0xae, 0x51, 0x96, 0x4f, 0x00, 0xa5, 0x90,
	0xfa, 0x35, 0xb6, 0x5a, 0xc5, 0x46, 0xd6, 0x77, 0x38, 0xa8, 0x16, 0x0b, 0x5f, 0xfd, 0x47, 0xde,
	0x8d, 0xed, 0x33, 0x5b, 0x15, 0xc5, 0xf3, 0xc2, 0xbf, 0x53, 0x29, 0xcb, 0xf9, 0x9b, 0x24, 0x6d,
	0x05, 0x3b, 0x31, 0xf0, 0x12, 0xe0, 0x8c, 0x24, 0x55, 0x73, 0x3f, 0xa4, 0xdd, 0x86, 0xca, 0x93,
	0x8b, 0xc9, 0xb3, 0x3b, 0x7f, 0x93, 0xcb, 0xf9, 0xb7, 0x77, 0x41, 0xc8, 0x3f, 0xf3, 0xb9, 0xc6,
	0x5b, 0x15, 0xde, 0x5a, 0xe1, 0x2d, 0x57, 0x86, 0x14, 0xb3, 0x15, 0xa8, 0xe2, 0x0b, 0xb8, 0x8e,
	0xeb, 0xe3, 0x7c, 0xbf, 0xe0, 0xbf, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x96, 0x24, 0x65,
	0x1f, 0x05, 0x00, 0x00,
}
