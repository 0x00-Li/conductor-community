// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/workflow_service.proto

package grpc // import "github.com/netflix/conductor/client/gogrpc/conductor/grpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import model "github.com/netflix/conductor/client/gogrpc/conductor/model"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetWorkflowsRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CorrelationId        []string `protobuf:"bytes,2,rep,name=correlation_id,json=correlationId" json:"correlation_id,omitempty"`
	IncludeClosed        bool     `protobuf:"varint,3,opt,name=include_closed,json=includeClosed" json:"include_closed,omitempty"`
	IncludeTasks         bool     `protobuf:"varint,4,opt,name=include_tasks,json=includeTasks" json:"include_tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWorkflowsRequest) Reset()         { *m = GetWorkflowsRequest{} }
func (m *GetWorkflowsRequest) String() string { return proto.CompactTextString(m) }
func (*GetWorkflowsRequest) ProtoMessage()    {}
func (*GetWorkflowsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_service_ebe287e56823ea2c, []int{0}
}
func (m *GetWorkflowsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWorkflowsRequest.Unmarshal(m, b)
}
func (m *GetWorkflowsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWorkflowsRequest.Marshal(b, m, deterministic)
}
func (dst *GetWorkflowsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkflowsRequest.Merge(dst, src)
}
func (m *GetWorkflowsRequest) XXX_Size() int {
	return xxx_messageInfo_GetWorkflowsRequest.Size(m)
}
func (m *GetWorkflowsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkflowsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkflowsRequest proto.InternalMessageInfo

func (m *GetWorkflowsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetWorkflowsRequest) GetCorrelationId() []string {
	if m != nil {
		return m.CorrelationId
	}
	return nil
}

func (m *GetWorkflowsRequest) GetIncludeClosed() bool {
	if m != nil {
		return m.IncludeClosed
	}
	return false
}

func (m *GetWorkflowsRequest) GetIncludeTasks() bool {
	if m != nil {
		return m.IncludeTasks
	}
	return false
}

type GetWorkflowsResponse struct {
	WorkflowsById        map[string]*GetWorkflowsResponse_Workflows `protobuf:"bytes,1,rep,name=workflows_by_id,json=workflowsById" json:"workflows_by_id,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *GetWorkflowsResponse) Reset()         { *m = GetWorkflowsResponse{} }
func (m *GetWorkflowsResponse) String() string { return proto.CompactTextString(m) }
func (*GetWorkflowsResponse) ProtoMessage()    {}
func (*GetWorkflowsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_service_ebe287e56823ea2c, []int{1}
}
func (m *GetWorkflowsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWorkflowsResponse.Unmarshal(m, b)
}
func (m *GetWorkflowsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWorkflowsResponse.Marshal(b, m, deterministic)
}
func (dst *GetWorkflowsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkflowsResponse.Merge(dst, src)
}
func (m *GetWorkflowsResponse) XXX_Size() int {
	return xxx_messageInfo_GetWorkflowsResponse.Size(m)
}
func (m *GetWorkflowsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkflowsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkflowsResponse proto.InternalMessageInfo

func (m *GetWorkflowsResponse) GetWorkflowsById() map[string]*GetWorkflowsResponse_Workflows {
	if m != nil {
		return m.WorkflowsById
	}
	return nil
}

type GetWorkflowsResponse_Workflows struct {
	Workflows            []*model.Workflow `protobuf:"bytes,1,rep,name=workflows" json:"workflows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetWorkflowsResponse_Workflows) Reset()         { *m = GetWorkflowsResponse_Workflows{} }
func (m *GetWorkflowsResponse_Workflows) String() string { return proto.CompactTextString(m) }
func (*GetWorkflowsResponse_Workflows) ProtoMessage()    {}
func (*GetWorkflowsResponse_Workflows) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_service_ebe287e56823ea2c, []int{1, 0}
}
func (m *GetWorkflowsResponse_Workflows) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWorkflowsResponse_Workflows.Unmarshal(m, b)
}
func (m *GetWorkflowsResponse_Workflows) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWorkflowsResponse_Workflows.Marshal(b, m, deterministic)
}
func (dst *GetWorkflowsResponse_Workflows) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkflowsResponse_Workflows.Merge(dst, src)
}
func (m *GetWorkflowsResponse_Workflows) XXX_Size() int {
	return xxx_messageInfo_GetWorkflowsResponse_Workflows.Size(m)
}
func (m *GetWorkflowsResponse_Workflows) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkflowsResponse_Workflows.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkflowsResponse_Workflows proto.InternalMessageInfo

func (m *GetWorkflowsResponse_Workflows) GetWorkflows() []*model.Workflow {
	if m != nil {
		return m.Workflows
	}
	return nil
}

type GetWorkflowStatusRequest struct {
	WorkflowId           string   `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId" json:"workflow_id,omitempty"`
	IncludeTasks         bool     `protobuf:"varint,2,opt,name=include_tasks,json=includeTasks" json:"include_tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWorkflowStatusRequest) Reset()         { *m = GetWorkflowStatusRequest{} }
func (m *GetWorkflowStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetWorkflowStatusRequest) ProtoMessage()    {}
func (*GetWorkflowStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_service_ebe287e56823ea2c, []int{2}
}
func (m *GetWorkflowStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWorkflowStatusRequest.Unmarshal(m, b)
}
func (m *GetWorkflowStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWorkflowStatusRequest.Marshal(b, m, deterministic)
}
func (dst *GetWorkflowStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkflowStatusRequest.Merge(dst, src)
}
func (m *GetWorkflowStatusRequest) XXX_Size() int {
	return xxx_messageInfo_GetWorkflowStatusRequest.Size(m)
}
func (m *GetWorkflowStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkflowStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkflowStatusRequest proto.InternalMessageInfo

func (m *GetWorkflowStatusRequest) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *GetWorkflowStatusRequest) GetIncludeTasks() bool {
	if m != nil {
		return m.IncludeTasks
	}
	return false
}

type RemoveWorkflowRequest struct {
	WorkflodId           string   `protobuf:"bytes,1,opt,name=workflod_id,json=workflodId" json:"workflod_id,omitempty"`
	ArchiveWorkflow      bool     `protobuf:"varint,2,opt,name=archive_workflow,json=archiveWorkflow" json:"archive_workflow,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveWorkflowRequest) Reset()         { *m = RemoveWorkflowRequest{} }
func (m *RemoveWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveWorkflowRequest) ProtoMessage()    {}
func (*RemoveWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_service_ebe287e56823ea2c, []int{3}
}
func (m *RemoveWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveWorkflowRequest.Unmarshal(m, b)
}
func (m *RemoveWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveWorkflowRequest.Marshal(b, m, deterministic)
}
func (dst *RemoveWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWorkflowRequest.Merge(dst, src)
}
func (m *RemoveWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveWorkflowRequest.Size(m)
}
func (m *RemoveWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWorkflowRequest proto.InternalMessageInfo

func (m *RemoveWorkflowRequest) GetWorkflodId() string {
	if m != nil {
		return m.WorkflodId
	}
	return ""
}

func (m *RemoveWorkflowRequest) GetArchiveWorkflow() bool {
	if m != nil {
		return m.ArchiveWorkflow
	}
	return false
}

type GetRunningWorkflowsRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version              int32    `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	StartTime            int64    `protobuf:"varint,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime              int64    `protobuf:"varint,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRunningWorkflowsRequest) Reset()         { *m = GetRunningWorkflowsRequest{} }
func (m *GetRunningWorkflowsRequest) String() string { return proto.CompactTextString(m) }
func (*GetRunningWorkflowsRequest) ProtoMessage()    {}
func (*GetRunningWorkflowsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_service_ebe287e56823ea2c, []int{4}
}
func (m *GetRunningWorkflowsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRunningWorkflowsRequest.Unmarshal(m, b)
}
func (m *GetRunningWorkflowsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRunningWorkflowsRequest.Marshal(b, m, deterministic)
}
func (dst *GetRunningWorkflowsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRunningWorkflowsRequest.Merge(dst, src)
}
func (m *GetRunningWorkflowsRequest) XXX_Size() int {
	return xxx_messageInfo_GetRunningWorkflowsRequest.Size(m)
}
func (m *GetRunningWorkflowsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRunningWorkflowsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRunningWorkflowsRequest proto.InternalMessageInfo

func (m *GetRunningWorkflowsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetRunningWorkflowsRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GetRunningWorkflowsRequest) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *GetRunningWorkflowsRequest) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type GetRunningWorkflowsResponse struct {
	WorkflowIds          []string `protobuf:"bytes,1,rep,name=workflow_ids,json=workflowIds" json:"workflow_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRunningWorkflowsResponse) Reset()         { *m = GetRunningWorkflowsResponse{} }
func (m *GetRunningWorkflowsResponse) String() string { return proto.CompactTextString(m) }
func (*GetRunningWorkflowsResponse) ProtoMessage()    {}
func (*GetRunningWorkflowsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_service_ebe287e56823ea2c, []int{5}
}
func (m *GetRunningWorkflowsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRunningWorkflowsResponse.Unmarshal(m, b)
}
func (m *GetRunningWorkflowsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRunningWorkflowsResponse.Marshal(b, m, deterministic)
}
func (dst *GetRunningWorkflowsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRunningWorkflowsResponse.Merge(dst, src)
}
func (m *GetRunningWorkflowsResponse) XXX_Size() int {
	return xxx_messageInfo_GetRunningWorkflowsResponse.Size(m)
}
func (m *GetRunningWorkflowsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRunningWorkflowsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRunningWorkflowsResponse proto.InternalMessageInfo

func (m *GetRunningWorkflowsResponse) GetWorkflowIds() []string {
	if m != nil {
		return m.WorkflowIds
	}
	return nil
}

type WorkflowId struct {
	WorkflowId           string   `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId" json:"workflow_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowId) Reset()         { *m = WorkflowId{} }
func (m *WorkflowId) String() string { return proto.CompactTextString(m) }
func (*WorkflowId) ProtoMessage()    {}
func (*WorkflowId) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_service_ebe287e56823ea2c, []int{6}
}
func (m *WorkflowId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkflowId.Unmarshal(m, b)
}
func (m *WorkflowId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkflowId.Marshal(b, m, deterministic)
}
func (dst *WorkflowId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowId.Merge(dst, src)
}
func (m *WorkflowId) XXX_Size() int {
	return xxx_messageInfo_WorkflowId.Size(m)
}
func (m *WorkflowId) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowId.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowId proto.InternalMessageInfo

func (m *WorkflowId) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

type SkipTaskRequest struct {
	WorkflowId           string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId" json:"workflow_id,omitempty"`
	TaskReferenceName    string                 `protobuf:"bytes,2,opt,name=task_reference_name,json=taskReferenceName" json:"task_reference_name,omitempty"`
	Request              *model.SkipTaskRequest `protobuf:"bytes,3,opt,name=request" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SkipTaskRequest) Reset()         { *m = SkipTaskRequest{} }
func (m *SkipTaskRequest) String() string { return proto.CompactTextString(m) }
func (*SkipTaskRequest) ProtoMessage()    {}
func (*SkipTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_service_ebe287e56823ea2c, []int{7}
}
func (m *SkipTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SkipTaskRequest.Unmarshal(m, b)
}
func (m *SkipTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SkipTaskRequest.Marshal(b, m, deterministic)
}
func (dst *SkipTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkipTaskRequest.Merge(dst, src)
}
func (m *SkipTaskRequest) XXX_Size() int {
	return xxx_messageInfo_SkipTaskRequest.Size(m)
}
func (m *SkipTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SkipTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SkipTaskRequest proto.InternalMessageInfo

func (m *SkipTaskRequest) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *SkipTaskRequest) GetTaskReferenceName() string {
	if m != nil {
		return m.TaskReferenceName
	}
	return ""
}

func (m *SkipTaskRequest) GetRequest() *model.SkipTaskRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type TerminateWorkflowRequest struct {
	WorkflowId           string   `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId" json:"workflow_id,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TerminateWorkflowRequest) Reset()         { *m = TerminateWorkflowRequest{} }
func (m *TerminateWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*TerminateWorkflowRequest) ProtoMessage()    {}
func (*TerminateWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_workflow_service_ebe287e56823ea2c, []int{8}
}
func (m *TerminateWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TerminateWorkflowRequest.Unmarshal(m, b)
}
func (m *TerminateWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TerminateWorkflowRequest.Marshal(b, m, deterministic)
}
func (dst *TerminateWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TerminateWorkflowRequest.Merge(dst, src)
}
func (m *TerminateWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_TerminateWorkflowRequest.Size(m)
}
func (m *TerminateWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TerminateWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TerminateWorkflowRequest proto.InternalMessageInfo

func (m *TerminateWorkflowRequest) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *TerminateWorkflowRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func init() {
	proto.RegisterType((*GetWorkflowsRequest)(nil), "com.netflix.conductor.grpc.GetWorkflowsRequest")
	proto.RegisterType((*GetWorkflowsResponse)(nil), "com.netflix.conductor.grpc.GetWorkflowsResponse")
	proto.RegisterMapType((map[string]*GetWorkflowsResponse_Workflows)(nil), "com.netflix.conductor.grpc.GetWorkflowsResponse.WorkflowsByIdEntry")
	proto.RegisterType((*GetWorkflowsResponse_Workflows)(nil), "com.netflix.conductor.grpc.GetWorkflowsResponse.Workflows")
	proto.RegisterType((*GetWorkflowStatusRequest)(nil), "com.netflix.conductor.grpc.GetWorkflowStatusRequest")
	proto.RegisterType((*RemoveWorkflowRequest)(nil), "com.netflix.conductor.grpc.RemoveWorkflowRequest")
	proto.RegisterType((*GetRunningWorkflowsRequest)(nil), "com.netflix.conductor.grpc.GetRunningWorkflowsRequest")
	proto.RegisterType((*GetRunningWorkflowsResponse)(nil), "com.netflix.conductor.grpc.GetRunningWorkflowsResponse")
	proto.RegisterType((*WorkflowId)(nil), "com.netflix.conductor.grpc.WorkflowId")
	proto.RegisterType((*SkipTaskRequest)(nil), "com.netflix.conductor.grpc.SkipTaskRequest")
	proto.RegisterType((*TerminateWorkflowRequest)(nil), "com.netflix.conductor.grpc.TerminateWorkflowRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkflowServiceClient is the client API for WorkflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkflowServiceClient interface {
	// POST /
	StartWorkflow(ctx context.Context, in *model.StartWorkflowRequest, opts ...grpc.CallOption) (*WorkflowId, error)
	// GET /{name}/correlated/{correlationId}
	GetWorkflows(ctx context.Context, in *GetWorkflowsRequest, opts ...grpc.CallOption) (*GetWorkflowsResponse, error)
	// GET /{workflowId}
	GetWorkflowStatus(ctx context.Context, in *GetWorkflowStatusRequest, opts ...grpc.CallOption) (*model.Workflow, error)
	// DELETE /{workflodId}/remove
	RemoveWorkflow(ctx context.Context, in *RemoveWorkflowRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GET /running/{name}
	GetRunningWorkflows(ctx context.Context, in *GetRunningWorkflowsRequest, opts ...grpc.CallOption) (*GetRunningWorkflowsResponse, error)
	// PUT /decide/{workflowId}
	DecideWorkflow(ctx context.Context, in *WorkflowId, opts ...grpc.CallOption) (*empty.Empty, error)
	// PUT /{workflowId}/pause
	PauseWorkflow(ctx context.Context, in *WorkflowId, opts ...grpc.CallOption) (*empty.Empty, error)
	// PUT /{workflowId}/pause
	ResumeWorkflow(ctx context.Context, in *WorkflowId, opts ...grpc.CallOption) (*empty.Empty, error)
	// PUT /{workflowId}/skiptask/{taskReferenceName}
	SkipTaskFromWorkflow(ctx context.Context, in *SkipTaskRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// POST /{workflowId}/rerun
	RerunWorkflow(ctx context.Context, in *model.RerunWorkflowRequest, opts ...grpc.CallOption) (*WorkflowId, error)
	// POST /{workflowId}/restart
	RestartWorkflow(ctx context.Context, in *WorkflowId, opts ...grpc.CallOption) (*empty.Empty, error)
	// POST /{workflowId}retry
	RetryWorkflow(ctx context.Context, in *WorkflowId, opts ...grpc.CallOption) (*empty.Empty, error)
	// POST /{workflowId}/resetcallbacks
	ResetWorkflowCallbacks(ctx context.Context, in *WorkflowId, opts ...grpc.CallOption) (*empty.Empty, error)
	// DELETE /{workflowId}
	TerminateWorkflow(ctx context.Context, in *TerminateWorkflowRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GET /search
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*WorkflowSummarySearchResult, error)
	SearchByTasks(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*WorkflowSummarySearchResult, error)
}

type workflowServiceClient struct {
	cc *grpc.ClientConn
}

func NewWorkflowServiceClient(cc *grpc.ClientConn) WorkflowServiceClient {
	return &workflowServiceClient{cc}
}

func (c *workflowServiceClient) StartWorkflow(ctx context.Context, in *model.StartWorkflowRequest, opts ...grpc.CallOption) (*WorkflowId, error) {
	out := new(WorkflowId)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.WorkflowService/StartWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflows(ctx context.Context, in *GetWorkflowsRequest, opts ...grpc.CallOption) (*GetWorkflowsResponse, error) {
	out := new(GetWorkflowsResponse)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.WorkflowService/GetWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowStatus(ctx context.Context, in *GetWorkflowStatusRequest, opts ...grpc.CallOption) (*model.Workflow, error) {
	out := new(model.Workflow)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.WorkflowService/GetWorkflowStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) RemoveWorkflow(ctx context.Context, in *RemoveWorkflowRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.WorkflowService/RemoveWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetRunningWorkflows(ctx context.Context, in *GetRunningWorkflowsRequest, opts ...grpc.CallOption) (*GetRunningWorkflowsResponse, error) {
	out := new(GetRunningWorkflowsResponse)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.WorkflowService/GetRunningWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) DecideWorkflow(ctx context.Context, in *WorkflowId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.WorkflowService/DecideWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) PauseWorkflow(ctx context.Context, in *WorkflowId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.WorkflowService/PauseWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) ResumeWorkflow(ctx context.Context, in *WorkflowId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.WorkflowService/ResumeWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) SkipTaskFromWorkflow(ctx context.Context, in *SkipTaskRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.WorkflowService/SkipTaskFromWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) RerunWorkflow(ctx context.Context, in *model.RerunWorkflowRequest, opts ...grpc.CallOption) (*WorkflowId, error) {
	out := new(WorkflowId)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.WorkflowService/RerunWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) RestartWorkflow(ctx context.Context, in *WorkflowId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.WorkflowService/RestartWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) RetryWorkflow(ctx context.Context, in *WorkflowId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.WorkflowService/RetryWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) ResetWorkflowCallbacks(ctx context.Context, in *WorkflowId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.WorkflowService/ResetWorkflowCallbacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) TerminateWorkflow(ctx context.Context, in *TerminateWorkflowRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.WorkflowService/TerminateWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*WorkflowSummarySearchResult, error) {
	out := new(WorkflowSummarySearchResult)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.WorkflowService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) SearchByTasks(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*WorkflowSummarySearchResult, error) {
	out := new(WorkflowSummarySearchResult)
	err := c.cc.Invoke(ctx, "/com.netflix.conductor.grpc.WorkflowService/SearchByTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowServiceServer is the server API for WorkflowService service.
type WorkflowServiceServer interface {
	// POST /
	StartWorkflow(context.Context, *model.StartWorkflowRequest) (*WorkflowId, error)
	// GET /{name}/correlated/{correlationId}
	GetWorkflows(context.Context, *GetWorkflowsRequest) (*GetWorkflowsResponse, error)
	// GET /{workflowId}
	GetWorkflowStatus(context.Context, *GetWorkflowStatusRequest) (*model.Workflow, error)
	// DELETE /{workflodId}/remove
	RemoveWorkflow(context.Context, *RemoveWorkflowRequest) (*empty.Empty, error)
	// GET /running/{name}
	GetRunningWorkflows(context.Context, *GetRunningWorkflowsRequest) (*GetRunningWorkflowsResponse, error)
	// PUT /decide/{workflowId}
	DecideWorkflow(context.Context, *WorkflowId) (*empty.Empty, error)
	// PUT /{workflowId}/pause
	PauseWorkflow(context.Context, *WorkflowId) (*empty.Empty, error)
	// PUT /{workflowId}/pause
	ResumeWorkflow(context.Context, *WorkflowId) (*empty.Empty, error)
	// PUT /{workflowId}/skiptask/{taskReferenceName}
	SkipTaskFromWorkflow(context.Context, *SkipTaskRequest) (*empty.Empty, error)
	// POST /{workflowId}/rerun
	RerunWorkflow(context.Context, *model.RerunWorkflowRequest) (*WorkflowId, error)
	// POST /{workflowId}/restart
	RestartWorkflow(context.Context, *WorkflowId) (*empty.Empty, error)
	// POST /{workflowId}retry
	RetryWorkflow(context.Context, *WorkflowId) (*empty.Empty, error)
	// POST /{workflowId}/resetcallbacks
	ResetWorkflowCallbacks(context.Context, *WorkflowId) (*empty.Empty, error)
	// DELETE /{workflowId}
	TerminateWorkflow(context.Context, *TerminateWorkflowRequest) (*empty.Empty, error)
	// GET /search
	Search(context.Context, *SearchRequest) (*WorkflowSummarySearchResult, error)
	SearchByTasks(context.Context, *SearchRequest) (*WorkflowSummarySearchResult, error)
}

func RegisterWorkflowServiceServer(s *grpc.Server, srv WorkflowServiceServer) {
	s.RegisterService(&_WorkflowService_serviceDesc, srv)
}

func _WorkflowService_StartWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.StartWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).StartWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.WorkflowService/StartWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).StartWorkflow(ctx, req.(*model.StartWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.WorkflowService/GetWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflows(ctx, req.(*GetWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.WorkflowService/GetWorkflowStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowStatus(ctx, req.(*GetWorkflowStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_RemoveWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).RemoveWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.WorkflowService/RemoveWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).RemoveWorkflow(ctx, req.(*RemoveWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetRunningWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunningWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetRunningWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.WorkflowService/GetRunningWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetRunningWorkflows(ctx, req.(*GetRunningWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_DecideWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).DecideWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.WorkflowService/DecideWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).DecideWorkflow(ctx, req.(*WorkflowId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_PauseWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).PauseWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.WorkflowService/PauseWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).PauseWorkflow(ctx, req.(*WorkflowId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_ResumeWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).ResumeWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.WorkflowService/ResumeWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).ResumeWorkflow(ctx, req.(*WorkflowId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_SkipTaskFromWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkipTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).SkipTaskFromWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.WorkflowService/SkipTaskFromWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).SkipTaskFromWorkflow(ctx, req.(*SkipTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_RerunWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.RerunWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).RerunWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.WorkflowService/RerunWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).RerunWorkflow(ctx, req.(*model.RerunWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_RestartWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).RestartWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.WorkflowService/RestartWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).RestartWorkflow(ctx, req.(*WorkflowId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_RetryWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).RetryWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.WorkflowService/RetryWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).RetryWorkflow(ctx, req.(*WorkflowId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_ResetWorkflowCallbacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).ResetWorkflowCallbacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.WorkflowService/ResetWorkflowCallbacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).ResetWorkflowCallbacks(ctx, req.(*WorkflowId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_TerminateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).TerminateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.WorkflowService/TerminateWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).TerminateWorkflow(ctx, req.(*TerminateWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.WorkflowService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_SearchByTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).SearchByTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.conductor.grpc.WorkflowService/SearchByTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).SearchByTasks(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkflowService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.netflix.conductor.grpc.WorkflowService",
	HandlerType: (*WorkflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartWorkflow",
			Handler:    _WorkflowService_StartWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflows",
			Handler:    _WorkflowService_GetWorkflows_Handler,
		},
		{
			MethodName: "GetWorkflowStatus",
			Handler:    _WorkflowService_GetWorkflowStatus_Handler,
		},
		{
			MethodName: "RemoveWorkflow",
			Handler:    _WorkflowService_RemoveWorkflow_Handler,
		},
		{
			MethodName: "GetRunningWorkflows",
			Handler:    _WorkflowService_GetRunningWorkflows_Handler,
		},
		{
			MethodName: "DecideWorkflow",
			Handler:    _WorkflowService_DecideWorkflow_Handler,
		},
		{
			MethodName: "PauseWorkflow",
			Handler:    _WorkflowService_PauseWorkflow_Handler,
		},
		{
			MethodName: "ResumeWorkflow",
			Handler:    _WorkflowService_ResumeWorkflow_Handler,
		},
		{
			MethodName: "SkipTaskFromWorkflow",
			Handler:    _WorkflowService_SkipTaskFromWorkflow_Handler,
		},
		{
			MethodName: "RerunWorkflow",
			Handler:    _WorkflowService_RerunWorkflow_Handler,
		},
		{
			MethodName: "RestartWorkflow",
			Handler:    _WorkflowService_RestartWorkflow_Handler,
		},
		{
			MethodName: "RetryWorkflow",
			Handler:    _WorkflowService_RetryWorkflow_Handler,
		},
		{
			MethodName: "ResetWorkflowCallbacks",
			Handler:    _WorkflowService_ResetWorkflowCallbacks_Handler,
		},
		{
			MethodName: "TerminateWorkflow",
			Handler:    _WorkflowService_TerminateWorkflow_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _WorkflowService_Search_Handler,
		},
		{
			MethodName: "SearchByTasks",
			Handler:    _WorkflowService_SearchByTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/workflow_service.proto",
}

func init() {
	proto.RegisterFile("grpc/workflow_service.proto", fileDescriptor_workflow_service_ebe287e56823ea2c)
}

var fileDescriptor_workflow_service_ebe287e56823ea2c = []byte{
	// 919 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0x97, 0xed, 0x34, 0xa9, 0xc7, 0x71, 0x5c, 0x6f, 0x43, 0x64, 0x2e, 0x42, 0x18, 0xa3, 0x22,
	0x57, 0xc0, 0x19, 0x02, 0xe2, 0x4f, 0x9f, 0x50, 0x42, 0x5b, 0xe5, 0xa5, 0x98, 0x75, 0xa4, 0x22,
	0xfa, 0x70, 0x9c, 0xef, 0x26, 0xee, 0xd5, 0x77, 0xb7, 0xee, 0xee, 0x9e, 0x83, 0x25, 0x1e, 0x11,
	0x9f, 0x82, 0x4f, 0xc0, 0x47, 0xe1, 0x95, 0x2f, 0x84, 0x76, 0x6f, 0xef, 0x6c, 0xc7, 0x3e, 0xd7,
	0x81, 0xa8, 0x6f, 0x77, 0xbf, 0x99, 0xfd, 0xcd, 0xec, 0xcc, 0xfc, 0x76, 0x17, 0x8e, 0x47, 0x7c,
	0xe2, 0xf5, 0xae, 0x18, 0x1f, 0x5f, 0x86, 0xec, 0xca, 0x11, 0xc8, 0xa7, 0x81, 0x87, 0xf6, 0x84,
	0x33, 0xc9, 0x88, 0xe5, 0xb1, 0xc8, 0x8e, 0x51, 0x5e, 0x86, 0xc1, 0xaf, 0xb6, 0xc7, 0x62, 0x3f,
	0xf1, 0x24, 0xe3, 0xb6, 0x5a, 0x62, 0x1d, 0x8f, 0x18, 0x1b, 0x85, 0xd8, 0xd3, 0x9e, 0xc3, 0xe4,
	0xb2, 0x87, 0xd1, 0x44, 0xce, 0xd2, 0x85, 0x56, 0x53, 0xb3, 0x0a, 0x74, 0xb9, 0xf7, 0xd2, 0x40,
	0x87, 0x11, 0xf3, 0x31, 0xcc, 0x23, 0x19, 0xf4, 0x38, 0x45, 0xc5, 0x38, 0x98, 0x48, 0x57, 0x8c,
	0x39, 0xbe, 0x4e, 0x50, 0x48, 0x63, 0x6c, 0x1b, 0xa3, 0x74, 0xb9, 0xcc, 0xd6, 0xad, 0xf5, 0xe0,
	0xc8, 0x93, 0x78, 0xad, 0x47, 0xe7, 0xcf, 0x12, 0xdc, 0x7f, 0x8a, 0xf2, 0xb9, 0x31, 0x0a, 0x9a,
	0x5a, 0x09, 0x81, 0x9d, 0xd8, 0x8d, 0xb0, 0x55, 0x6a, 0x97, 0xba, 0x55, 0xaa, 0xbf, 0xc9, 0x03,
	0x38, 0xf0, 0x18, 0xe7, 0x18, 0xba, 0x32, 0x60, 0xb1, 0x13, 0xf8, 0xad, 0x72, 0xbb, 0xd2, 0xad,
	0xd2, 0xfa, 0x02, 0x7a, 0xee, 0x2b, 0xb7, 0x20, 0xf6, 0xc2, 0xc4, 0x47, 0xc7, 0x0b, 0x99, 0x40,
	0xbf, 0x55, 0x69, 0x97, 0xba, 0x77, 0x69, 0xdd, 0xa0, 0x67, 0x1a, 0x24, 0x1f, 0x42, 0x06, 0x38,
	0x6a, 0x6b, 0xa2, 0xb5, 0xa3, 0xbd, 0xf6, 0x0d, 0x78, 0xa1, 0xb0, 0xce, 0x3f, 0x65, 0x38, 0x5c,
	0x4e, 0x4f, 0x4c, 0x58, 0x2c, 0x90, 0x8c, 0xa1, 0x91, 0x6d, 0x48, 0x38, 0xc3, 0x99, 0x4a, 0xa6,
	0xd4, 0xae, 0x74, 0x6b, 0x27, 0x67, 0x76, 0x71, 0x53, 0xec, 0x75, 0x54, 0x76, 0x8e, 0x9c, 0xce,
	0xce, 0xfd, 0xc7, 0xb1, 0xe4, 0x33, 0x5a, 0xbf, 0x5a, 0xc4, 0xac, 0x3e, 0x54, 0x73, 0x27, 0x72,
	0x06, 0xd5, 0xdc, 0x6a, 0x62, 0x3e, 0x28, 0x88, 0xa9, 0x4b, 0x9c, 0xf3, 0xd3, 0xf9, 0x3a, 0xeb,
	0x37, 0x20, 0xab, 0x61, 0xc9, 0x3d, 0xa8, 0x8c, 0x71, 0x66, 0x6a, 0xae, 0x3e, 0x49, 0x1f, 0xee,
	0x4c, 0xdd, 0x30, 0xc1, 0x56, 0xb9, 0x5d, 0xea, 0xd6, 0x4e, 0x1e, 0xfd, 0xf7, 0xcd, 0xd1, 0x94,
	0xe8, 0x51, 0xf9, 0x9b, 0x52, 0xe7, 0x17, 0x68, 0x2d, 0x38, 0x0f, 0xa4, 0x2b, 0x93, 0xbc, 0xf1,
	0xef, 0x43, 0x2d, 0x9f, 0x76, 0x5d, 0x54, 0x95, 0x0b, 0x64, 0xd0, 0xf9, 0x9a, 0xbe, 0x95, 0xd7,
	0xf4, 0xcd, 0x83, 0x77, 0x28, 0x46, 0x6c, 0x8a, 0xf9, 0xe6, 0x57, 0xe8, 0xfd, 0x55, 0x7a, 0xff,
	0xdc, 0x27, 0x0f, 0xe1, 0x9e, 0x52, 0x45, 0x30, 0x45, 0x27, 0x0b, 0x6a, 0x22, 0x34, 0x0c, 0x9e,
	0x51, 0x76, 0x7e, 0x2f, 0x81, 0xf5, 0x14, 0x25, 0x4d, 0xe2, 0x38, 0x88, 0x47, 0x5b, 0x8d, 0x70,
	0x0b, 0xf6, 0xa6, 0xc8, 0x45, 0xc0, 0x62, 0x4d, 0x7a, 0x87, 0x66, 0xbf, 0xe4, 0x3d, 0x00, 0x2d,
	0x24, 0x47, 0x06, 0x11, 0xea, 0x89, 0xad, 0xd0, 0xaa, 0x46, 0x2e, 0x82, 0x08, 0xc9, 0xbb, 0x70,
	0x17, 0x63, 0x3f, 0x35, 0xee, 0x68, 0xe3, 0x1e, 0xc6, 0xbe, 0x32, 0x75, 0xbe, 0x83, 0xe3, 0xb5,
	0x59, 0x98, 0x49, 0xfd, 0x00, 0xf6, 0x17, 0x0a, 0x9a, 0x8e, 0x4c, 0x95, 0xd6, 0xe6, 0x15, 0x15,
	0x9d, 0x4f, 0x01, 0x9e, 0xcf, 0x0b, 0xfc, 0xa6, 0x0e, 0x74, 0xfe, 0x2a, 0x41, 0x63, 0x30, 0x0e,
	0x26, 0xaa, 0xd4, 0x5b, 0xb7, 0xcd, 0x86, 0xfb, 0xaa, 0x5d, 0x0e, 0xc7, 0x4b, 0xe4, 0x18, 0x7b,
	0xe8, 0xe8, 0xe2, 0x94, 0xb5, 0x63, 0x53, 0x6a, 0x2a, 0x63, 0x79, 0xa6, 0x2a, 0xf5, 0x04, 0xf6,
	0xcc, 0x49, 0xa1, 0x8b, 0x51, 0x3b, 0xf9, 0x64, 0xe3, 0x90, 0x5f, 0xcb, 0x87, 0x66, 0x8b, 0x3b,
	0x03, 0x68, 0x5d, 0x20, 0x8f, 0x82, 0xd8, 0x95, 0x1b, 0x86, 0xa1, 0x20, 0xe9, 0x23, 0xd8, 0xe5,
	0xe8, 0x0a, 0xd3, 0xad, 0x2a, 0x35, 0x7f, 0x27, 0x7f, 0xef, 0x43, 0x23, 0x1f, 0xdf, 0xf4, 0x48,
	0x26, 0xaf, 0xa0, 0x3e, 0x50, 0xed, 0xca, 0x70, 0xf2, 0xf9, 0xe6, 0x84, 0x17, 0x7d, 0x4d, 0x42,
	0xd6, 0x47, 0x9b, 0xf4, 0xb5, 0xd0, 0xa2, 0xd7, 0xb0, 0xbf, 0xa8, 0x36, 0xd2, 0xdb, 0x5e, 0x97,
	0x69, 0xa0, 0xcf, 0x6e, 0x2a, 0x64, 0x32, 0x81, 0xe6, 0x8a, 0x66, 0xc9, 0x97, 0x5b, 0xd2, 0x2c,
	0x49, 0xdc, 0xda, 0xee, 0xb8, 0x22, 0x2f, 0xe0, 0x60, 0x59, 0xc3, 0x85, 0x15, 0xd5, 0xe1, 0xd6,
	0xea, 0xdd, 0x3a, 0xb2, 0xd3, 0x7b, 0xd0, 0xce, 0xee, 0x41, 0xfb, 0xb1, 0xba, 0x07, 0xc9, 0x1f,
	0xe9, 0xbd, 0x73, 0x5d, 0x35, 0xe4, 0xab, 0x37, 0xec, 0xa8, 0x40, 0xec, 0xd6, 0xd7, 0x37, 0x5e,
	0x67, 0xea, 0xda, 0x87, 0x83, 0xef, 0xd1, 0x0b, 0xfc, 0xf9, 0x2e, 0xb7, 0x1c, 0x82, 0xc2, 0xad,
	0xfd, 0x00, 0xf5, 0xbe, 0x9b, 0x88, 0xdb, 0x23, 0xec, 0xab, 0x46, 0x88, 0x24, 0xba, 0x3d, 0xc6,
	0x17, 0x70, 0x98, 0x09, 0xf6, 0x09, 0x67, 0x51, 0xce, 0xfb, 0xf1, 0x26, 0xde, 0x6b, 0x12, 0x2f,
	0x24, 0x7f, 0x05, 0x75, 0xaa, 0x1e, 0x1c, 0x5b, 0x0a, 0x71, 0xc9, 0xf7, 0xa6, 0x42, 0xfc, 0x11,
	0x1a, 0x14, 0xc5, 0x92, 0xec, 0x6f, 0xa1, 0x7d, 0x14, 0x25, 0x9f, 0xdd, 0x1a, 0xe1, 0x4f, 0x70,
	0x44, 0x51, 0xcc, 0xc5, 0x78, 0xe6, 0x86, 0xe1, 0xd0, 0xf5, 0xc6, 0xe2, 0x7f, 0x33, 0xbb, 0xd0,
	0x5c, 0x39, 0x5b, 0x37, 0x9f, 0x09, 0x45, 0x47, 0x71, 0x61, 0x88, 0x10, 0x76, 0x07, 0xfa, 0x99,
	0x4a, 0x1e, 0x6e, 0x9c, 0x0d, 0xed, 0xb3, 0x95, 0x18, 0xf3, 0x33, 0x29, 0x89, 0x22, 0x97, 0xcf,
	0xb2, 0x95, 0x22, 0x09, 0x25, 0x11, 0x50, 0x4f, 0xff, 0x4f, 0x67, 0xfa, 0x1d, 0xf1, 0x36, 0x82,
	0x9e, 0x3e, 0x3b, 0x6d, 0x5e, 0xbb, 0x4b, 0xfa, 0xc3, 0x9f, 0xbf, 0x1d, 0x05, 0xf2, 0x65, 0x32,
	0x54, 0x9c, 0x3d, 0xc3, 0xd9, 0xcb, 0x39, 0x7b, 0x5e, 0x18, 0x60, 0x2c, 0x7b, 0x23, 0xa6, 0xdf,
	0xf1, 0x73, 0x5c, 0xfd, 0x0e, 0x77, 0x75, 0x09, 0xbf, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0xeb,
	0x48, 0x45, 0x4d, 0x3b, 0x0c, 0x00, 0x00,
}
